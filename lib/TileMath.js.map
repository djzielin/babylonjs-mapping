{"version":3,"file":"TileMath.js","sourceRoot":"","sources":["../src/TileMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector4 } from \"@babylonjs/core/Maths/math\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { BoundingBox } from \"@babylonjs/core\";\nimport Tile from './Tile';\nimport TileSet from \"./TileSet\";\n\nexport enum EPSG_Type{\n    EPSG_3857,\n    EPSG_4326\n}\n\n// There are 3 main coordinate systems we deal with:\n// EPSG - could be lon,lat (4326) or webmercator (3857)\n// Tile - refers to specific tiling of basemap (based on zoom levels)\n// Game - the game engine coordinates used in babylonJS\n\nexport default class TileMath {\n\n    constructor(private tileSet: TileSet | undefined) {\n    }\n\n    //https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n    public lon_to_tile(lon: number, zoom: number): number { return (Math.floor((lon + 180) / 360 * Math.pow(2, zoom))); }\n    public lat_to_tile(lat: number, zoom: number): number { return (Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom))); }\n\n    //without rounding\n    public lon_to_tileExact(lon: number, zoom: number): number { return (((lon + 180) / 360 * Math.pow(2, zoom))); }\n    public lat_to_tileExact(lat: number, zoom: number): number { return (((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom))); }\n\n    //inverse\n    public tile_to_lon(x: number, z: number): number {\n        return (x / Math.pow(2, z) * 360 - 180);\n    }\n    public tile_to_lat(y: number, z: number): number {\n        var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n        return (180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))));\n    }\n\n    public tile_to_lonlat(tileCoords:Vector3):Vector2{\n        const x=tileCoords.x;\n        const y=tileCoords.y;\n        const zoom=tileCoords.z;\n\n        const lon=this.tile_to_lon(x,zoom);\n        const lat=this.tile_to_lat(y,zoom);\n\n        return new Vector2(lon,lat);\n    }\n\n    //from https://github.com/Turfjs/turf/blob/master/packages/turf-projection/index.ts\n    public epsg3857_to_Epsg4326(coord3857: Vector2) {\n\n        // 900913 properties.\n        var R2D = 180 / Math.PI;\n        var A = 6378137.0; //DJZ - this seems to be the equatorial radius? https://en.wikipedia.org/wiki/Earth_radius\n        //var A = 6371008.8; //this is what maptiler uses: https://github.com/maptiler/maptiler-client-js/blob/main/src/services/math.ts\n\n        return new Vector2(\n            (coord3857.x * R2D) / A,\n            (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-coord3857.y / A))) * R2D\n        );\n    } \n\n    public epsg4326_to_Epsg3857(lonLat: Vector2) {\n        var D2R = Math.PI / 180,\n            // 900913 properties\n            A = 6378137.0,\n            MAXEXTENT = 20037508.342789244;\n\n        // compensate longitudes passing the 180th meridian\n        // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n        var adjusted =\n            Math.abs(lonLat.x) <= 180 ? lonLat.x : lonLat.x - this.sign(lonLat.x) * 360;\n        const xy: Vector2 = new Vector2(\n            A * adjusted * D2R,\n            A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat.y * D2R)),\n        );\n\n        // if xy value is beyond maxextent (e.g. poles), return maxextent\n        if (xy.x > MAXEXTENT) xy.x = MAXEXTENT;\n        if (xy.x < -MAXEXTENT) xy.x = -MAXEXTENT;\n        if (xy.y > MAXEXTENT) xy.y = MAXEXTENT;\n        if (xy.y < -MAXEXTENT) xy.y = -MAXEXTENT;\n\n        return xy;\n    }\n\n    public sign(x: number): number {\n        return x < 0 ? -1 : x > 0 ? 1 : 0;\n    }\n\n    public EPSG_to_Game(pos: Vector2, epsg: EPSG_Type, zoom?: number): Vector3 {\n        if (zoom === undefined) {\n            if (this.tileSet === undefined) {\n                console.error(\"tileSet is undefined!\");\n                return new Vector3(0, 0, 0);\n            }\n\n            zoom = this.tileSet.zoom;\n        }\n\n        const exactTile = this.EPSG_to_TileExact(pos, epsg, zoom);\n        return this.Tile_to_Game(exactTile);\n    }\n\n    public Game_to_LonLat(gamePos: Vector3){\n        const t=this.Game_to_Tile(gamePos); \n        const lonlat=this.tile_to_lonlat(t);\n        return lonlat; //whoops, forgot this line previously. \n    }\n\n    public EPSG_to_Tile(pos: Vector2, epsg: EPSG_Type, zoom?: number): Vector2 {\n        if (zoom === undefined) {\n            if (this.tileSet === undefined) {\n                console.error(\"tileSet is undefined!\");\n                return new Vector2(0, 0);\n            }\n\n            zoom = this.tileSet.zoom;\n        }\n\n        const exact = this.EPSG_to_TileExact(pos, epsg, zoom);\n\n        return new Vector2(Math.floor(exact.x), Math.floor(exact.y));\n    }   \n    \n    public EPSG_to_TileExact(pos: Vector2, epsg: EPSG_Type, zoom?: number): Vector2 {\n        if (zoom === undefined) {\n            if (this.tileSet === undefined) {\n                console.error(\"tileSet is undefined!\");\n                return new Vector2(0, 0);\n            }\n            zoom = this.tileSet.zoom;\n        }\n\n        if (epsg == EPSG_Type.EPSG_4326 || epsg == EPSG_Type.EPSG_3857) {\n\n            let lonLat: Vector2=pos;\n\n            if(epsg==EPSG_Type.EPSG_3857) //if in meters\n            {\n                lonLat=this.epsg3857_to_Epsg4326(pos); //lets just get everything into 4326 (lat/lon), and then convert to tile\n            }\n\n            const x = this.lon_to_tileExact(lonLat.x, zoom);\n            const y = this.lat_to_tileExact(lonLat.y, zoom);\n\n            return new Vector2(x, y);\n        } else {\n            console.error(\"unknown projection type\");\n            return new Vector2(0, 0);\n        }\n    }    \n\n    ////////////////////////////////////////////////////////\n    // Tile to Game\n    // Game to Tile\n    ////////////////////////////////////////////////////////\n\n    public Tile_to_Game(pos: Vector2): Vector3 {\n        if(this.tileSet===undefined){\n            console.error(\"tileSet is undefined!\");\n            return new Vector3(0,0,0);\n        }\n\n        const t = this.tileSet.ourTiles[0]; //just grab the first tile\n\n        //console.log(\"corner tile coords: \" + t.tileCoords);\n\n        const tileDiffX = pos.x - t.tileCoords.x;\n        const tileDiffY = pos.y - t.tileCoords.y;\n\n        //console.log(\"tile diff: \" + tileDiffX + \" \" + tileDiffY);\n\n        const upperLeftCornerX = t.mesh.position.x - this.tileSet.tileWidth * 0.5;\n        const upperLeftCornerY = t.mesh.position.z + this.tileSet.tileWidth * 0.5;\n\n        //console.log(\"lower left corner: \" + upperLeftCornerX + \" \" + upperLeftCornerY);\n\n        const xFixed = upperLeftCornerX + tileDiffX * this.tileSet.tileWidth;\n        const yFixed = upperLeftCornerY - tileDiffY * this.tileSet.tileWidth;\n\n       // console.log(\"world position: \" + xFixed +\" \" + yFixed);       \n\n        return new Vector3(xFixed, 0, yFixed);\n    }\n\n    public Game_to_Tile(gPos: Vector3): Vector3 {\n        if(this.tileSet===undefined){\n            console.error(\"tileSet is undefined!\");\n            return new Vector3(0,0,0);\n        }\n\n        const t = this.tileSet.ourTiles[0]; //just grab the first tile\n\n        const tileX = t.tileCoords.x;\n        const tileY = t.tileCoords.y;\n\n        const lowerLeftCornerGameX = t.mesh.position.x - this.tileSet.tileWidth * 0.5;\n        const lowerLeftCornerGameY = t.mesh.position.z + this.tileSet.tileWidth * 0.5;\n \n        const posDiffX = gPos.x-lowerLeftCornerGameX;\n        const posDiffY = lowerLeftCornerGameY-gPos.z;\n \n        const diffInTileCoordinatesX=posDiffX/this.tileSet.tileWidth;\n        const diffinTileCoordinatesY=posDiffY/this.tileSet.tileWidth;\n\n        const finalTileX=tileX+diffInTileCoordinatesX;\n        const finalTileY=tileY+diffinTileCoordinatesY;\n\n        return new Vector3(finalTileX, finalTileY, this.tileSet.zoom);\n    }\n\n    public computeBBOX_4326(tileCoords:Vector3): Vector4{\n        console.log(\"In computeBBOX_4326!\");\n        console.log(\"   looking at tile: \" + tileCoords);\n    \n        const tileBottomLeft=tileCoords.add(new Vector3(0,1,0));\n        console.log(\"   proposed bottom left: \" + tileBottomLeft);\n\n        const bottomLeft=this.tile_to_lonlat(tileBottomLeft);\n        console.log(\"   result: \" + bottomLeft);\n\n        const tileUpperRight=tileCoords.add(new Vector3(1,0,0));\n        console.log(\"   proposed upper right: \" + tileUpperRight);\n\n        const topRight=this.tile_to_lonlat(tileUpperRight);\n        console.log(\"   result: \" + topRight);\n\n        const finalResult = new Vector4(bottomLeft.y, bottomLeft.x, topRight.y, topRight.x); //note the swapped y,x and to get lat,lon ordering   \n        console.log(\"   final result: \" + finalResult);\n        return finalResult;\n    }\n\n    //compute the bounding box of the entire tileset!\n    public computeBBOX_4326_Tileset(): Vector4{\n        if(this.tileSet===undefined){\n            console.error(\"tileSet is undefined!\");\n            return new Vector4(0,0,0,0);\n        }\n\n        console.log(\"In computeBBOX_4326_Tileset!\");\n\n        const tile: Tile=this.tileSet.ourTiles[0];\n\n        let left=tile.tileCoords.x; \n        let right=tile.tileCoords.x;\n        let top=tile.tileCoords.y;\n        let bottom=tile.tileCoords.y;\n        const zoom=this.tileSet.zoom;\n\n        for(const t of this.tileSet.ourTiles){\n            const x=t.tileCoords.x;\n            const y=t.tileCoords.y;\n\n            if(x<left)   left=x;\n            if(x>right)  right=x; \n            if(y<top)    top=y;\n            if(y>bottom) bottom=y;\n        }\n        \n        right++; //since tile origin is upper left of individual tile\n        bottom++;\n\n        const tileBottomLeft=new Vector3(left,bottom,zoom);\n        console.log(\"  tile bottom left: \" + tileBottomLeft);\n        const bottomLeft=this.tile_to_lonlat(tileBottomLeft);\n        console.log(\"    lon lat result: \" + bottomLeft);\n\n        const tileTopRight=new Vector3(right,top,zoom);\n        console.log(\"  tile top right: \" + tileTopRight);\n        const topRight=this.tile_to_lonlat(tileTopRight);\n        console.log(\"    lon lat result: \" + topRight);\n\n        const finalResult = new Vector4(bottomLeft.y, bottomLeft.x, topRight.y, topRight.x); //note the swapped y,x and to get lat,lon ordering   \n        console.log(\"  final result: \" + finalResult);\n        return finalResult;\n    }\n\n    /*\n    public computeBBOX_3857(tileCoords: Vector3): Vector4 {\n        const answer4326 = this.computeBBOX_4326(tileCoords);\n\n        const firstPair = new Vector2(answer4326.y, answer4326.x); //flip back to lon,lat\n        const secondPair = new Vector2(answer4326.w, answer4326.z);\n\n        const fixedFirst = this.epsg4326toEpsg3857(firstPair);\n        const fixedSecond = this.epsg4326toEpsg3857(secondPair);\n\n        const finalResult = new Vector4(fixedFirst.x, fixedFirst.y, fixedSecond.x, fixedSecond.y);    \n        return finalResult;\n    }*/\n\n    //https://wiki.openstreetmap.org/wiki/Zoom_levels\n    //Stile = C ∙ cos(latitude) / 2^zoomlevel\n    public computeTileRealWidthMeters(lat: number, zoom: number): number {\n        if (zoom == 0) {\n            console.log(\"ERROR: zoom not setup yet!\");\n            return 0;\n        }\n        console.log(\"tryign to compute tile width for lat: \" + lat);\n\n        const C = 40075016.686;\n        const latRadians = lat * Math.PI / 180.0;\n        return C * Math.cos(latRadians) / Math.pow(2, zoom); //seems to need abs?\n    }\n\n    public computeCornerTile(pos: Vector2, epsg: EPSG_Type, zoom?: number): Vector2 {\n        if (this.tileSet === undefined) {\n            console.error(\"tileSet is undefined!\");\n            return new Vector2(0, 0);\n        }\n\n        if (zoom === undefined) {\n            zoom = this.tileSet.zoom;\n        }\n\n        console.log(\"computing corner tile for: \" + pos);\n\n        let cornerTile = this.EPSG_to_Tile(pos, epsg, zoom);\n        console.log(\"center tile: \" + cornerTile);\n\n        cornerTile.x -= Math.floor(this.tileSet.numTiles.x / 2); //use floor to handle odd tileset sizes\n        cornerTile.y += Math.floor(this.tileSet.numTiles.y / 2);\n\n        console.log(\"corner tile: \" + cornerTile);\n\n        return cornerTile;\n    }\n\n    public computeTileScale(): number {\n        if(this.tileSet===undefined){\n            console.error(\"tileSet is undefined!\");\n            return 0; \n        }\n\n        const tileMeters = this.computeTileRealWidthMeters(this.tileSet.centerCoords.y, this.tileSet.zoom);\n        console.log(\"tile (real world) width in meters: \" + tileMeters);\n\n        const tileWorldMeters = this.tileSet.tileWidth; //passed in a parameter in the constructor\n\n        console.log(\"tile (in game) width in meteres: \" + tileWorldMeters);\n\n        const result = tileWorldMeters / tileMeters;\n        console.log(\"scale of tile (in game) (1.0 would be true size): \" + result);\n\n        return result;\n    }\n\n    public findBestTile(position: Vector3): Tile | undefined{\n        if(this.tileSet===undefined){\n            console.error(\"tileSet is undefined!\");\n            return undefined;\n        }\n\n        const tileHalfWidth=this.tileSet.tileWidth*0.500001; //make bounding box just a bit bigger, in the off chance something lands right on the line\n        const addMax=new Vector3(this.tileSet.tileWidth*0.5,0,this.tileSet.tileWidth*0.5);\n        const addMin=new Vector3(-this.tileSet.tileWidth*0.5,0,-this.tileSet.tileWidth*0.5);\n\n        let closestTileDistance=Number.POSITIVE_INFINITY;\n        let closestTile=this.tileSet.ourTiles[0];\n\n        for (const t of this.tileSet.ourTiles) {\n            const tp=t.mesh.position;\n            const tMax=tp.add(addMax);\n            const tMin=tp.add(addMin);\n            const tileBox: BoundingBox=new BoundingBox(tMin,tMax);   \n            //console.log(\"box: \" + tileBox.center + \" \" + tileBox.centerWorld);   \n\n            if(tileBox.intersectsPoint(position)){\n                //console.log(\"found a tile that can contain this building!\");\n                return t;\n            }\n\n            const dist = Vector3.Distance(tp, position);\n            if (dist < closestTileDistance) {\n                closestTile = t;\n            }\n        }\n\n        console.log(\"couldn't find a tile for this building. choosing closest tile\");\n        return closestTile; //position wasn't inside tile, so we will send back the closest tile\n    }\n\n    public generateSKU(): string {\n        //sku code generation from:\n        //https://github.com/mapbox/mapbox-gl-js/blob/992514ac5471c1231d8a1951bc6752a65aa9e3e6/src/util/sku_token.js\n\n        const SKU_ID = '01';\n        const TOKEN_VERSION = '1';\n        const base62chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        // sessionRandomizer is a randomized 10-digit base-62 number\n        let sessionRandomizer = '';\n        for (let i = 0; i < 10; i++) {\n            sessionRandomizer += base62chars[Math.floor(Math.random() * 62)];\n        }\n\n        let skuToken: string = [TOKEN_VERSION, SKU_ID, sessionRandomizer].join('');\n        console.log(\"computed mapbox sku: \" + skuToken);\n\n        return skuToken;\n    }\n\n    // line intercept math by Paul Bourke http://paulbourke.net/geometry/pointlineplane/\n    // Determine the intersection point of two line segments\n    // Return FALSE if the lines don't intersect\n    // updated by DJZ for TypeScript / BabylonJS\n    public line_segment_intersect(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2): Vector2 | false {\n\n        const x1: number = p1.x;\n        const y1: number = p1.y;\n        const x2: number = p2.x;\n        const y2: number = p2.y;\n        const x3: number = p3.x;\n        const y3: number = p3.y;\n        const x4: number = p4.x;\n        const y4: number = p4.y;\n\n        // Check if none of the lines are of length 0\n        if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n            return false\n        }\n\n        const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n\n        // Lines are parallel\n        if (denominator === 0) {\n            return false\n        }\n\n        let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator\n        let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator\n\n        // is the intersection along the segments\n        if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n            return false;\n        }\n\n        // Return a object with the x and y coordinates of the intersection\n        let x = x1 + ua * (x2 - x1);\n        let y = y1 + ua * (y2 - y1);\n\n        return new Vector2(x, y)\n    }\n\n    public v3_to_v2(v: Vector3): Vector2{\n        return new Vector2(v.x,v.z);\n    }\n\n    public v2_to_v3(v: Vector2): Vector3{\n        return new Vector3(v.x,0,v.y);\n    }\n}\n"]}