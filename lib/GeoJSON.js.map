{"version":3,"file":"GeoJSON.js","sourceRoot":"","sources":["../src/GeoJSON.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\"\nimport { Scene } from \"@babylonjs/core\";\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport Earcut from 'earcut';\nimport Buildings, { RetrievalType } from \"./Buildings\";\nimport Tile from './Tile';\nimport TileSet from \"./TileSet\";\nimport { EPSG_Type } from \"./TileMath\";\nimport TileMath from \"./TileMath\";\nimport TileBuilding from \"./TileBuilding\";\n\nexport interface topLevel {\n    \"type\": string;\n    \"features\": feature[];\n}\n\nexport interface feature {\n    \"id\": string;\n    \"type\": string;\n    \"properties\": any;\n    \"geometry\": geometry;\n}\n\nexport interface propertiesOSM {\n    \"name\": string;\n    \"type\": string;\n    \"height\": number;\n    \"levels\": number;\n}\n\nexport interface geometry {\n    \"type\": string;\n    \"coordinates\": unknown;\n}\n\nexport interface multiPolygonSet extends Array<polygonSet> { }\nexport interface polygonSet extends Array<coordinateSet> { }\nexport interface coordinateSet extends Array<coordinatePair> { }\nexport interface coordinatePair extends Array<number> { }\n\nexport interface coordinateArray extends Array<Vector3> { }\nexport interface coordinateArrayOfArrays extends Array<coordinateArray> { }\n\nexport class GeoJSON {\n    constructor(private tileSet: TileSet, private scene: Scene) {\n    }\n\n    /*private getFirstCoordinateWorld(f: feature, projection: ProjectionType, zoom?: number): Vector3 {\n        if (zoom === undefined) {\n            zoom = this.tileSet.zoom;\n        }\n\n        if (f.geometry.type == \"Polygon\") {\n            const ps: polygonSet = f.geometry.coordinates as polygonSet;\n            return this.getFirstCoordinateWorldFromPolygonSet(ps, projection);\n        }\n        else if (f.geometry.type == \"MultiPolygon\") {\n            const mp: multiPolygonSet = f.geometry.coordinates as multiPolygonSet;\n            return this.getFirstCoordinateWorldFromPolygonSet(mp[0], projection);\n        }\n        else {\n            console.error(\"unknown geometry type: \" + f.geometry.type);\n        }\n\n        return new Vector3(0,0,0);\n    }\n\n    private getFirstCoordinateWorldFromPolygonSet(ps: polygonSet, projection: ProjectionType, zoom?: number): Vector3 {\n        const v2 = new Vector2(ps[0][0][0], ps[0][0][1]);\n        return this.tileSet.ourTileMath.GetWorldPosition(v2, projection, zoom)\n    }\n\n    public getFirstCoordinateTile(f: feature, projection: ProjectionType, zoom: number): Vector3 {\n        if (zoom === undefined) {\n            zoom = this.tileSet.zoom;\n        }\n\n        if (f.geometry.type == \"Polygon\") {\n            const ps: polygonSet = f.geometry.coordinates as polygonSet;\n            return this.getFirstCoordinateTileFromPolygonSet(ps, projection, zoom);\n        }\n        else if (f.geometry.type == \"MultiPolygon\") {\n            const mp: multiPolygonSet = f.geometry.coordinates as multiPolygonSet;\n            return this.getFirstCoordinateTileFromPolygonSet(mp[0], projection, zoom);\n        }\n        else {\n            console.error(\"unknown geometry type: \" + f.geometry.type);\n        }\n\n        return new Vector3(0,0,0);\n    }\n\n    private getFirstCoordinateTileFromPolygonSet(ps: polygonSet, projection: ProjectionType, zoom: number): Vector3 {\n        const v2 = new Vector2(ps[0][0][0], ps[0][0][1]);\n        const tileXY= this.tileSet.ourTileMath.GetTilePosition(v2, projection, zoom); //lat lon\n        return new Vector3(tileXY.x, tileXY.y, zoom);\n    }*/\n\n    private convertCoordinatePairToVector2(cp: coordinatePair): Vector2 {\n        const v1 = new Vector2(cp[0], cp[1]);\n        return v1;\n    }\n\n    private convertVector2ToCoordinatePair(v: Vector2): coordinatePair {\n        const cp: coordinatePair = [];\n        cp.push(v.x);\n        cp.push(v.y);\n\n        return cp;\n    }\n\n    private computeOffset(v1: Vector2, v2: Vector2, lineWidth: number): Vector2 {\n        const diff = v2.subtract(v1);\n        const perp = new Vector2(diff.y * -1.0, diff.x * 1.0);\n        const perpNormalized = perp.normalize();\n        const halfLineWidth = lineWidth * 0.5;\n        const offset = perpNormalized.multiplyByFloats(halfLineWidth, halfLineWidth); //TODO: Make this a parameter (ie line width)\n\n        return offset;\n    }\n\n    private convertLineToPolygonSet(cs: coordinateSet, lineWidth: number): polygonSet {\n        const newPS: polygonSet = [];\n\n        //if(doVerbose) console.log(\"original line has number of points: \" + cs.length);\n\n        const newCS: coordinateSet = [];\n\n\n        for (let p = 0; p < cs.length - 1; p++) { //go forward down the line\n            const v1 = this.convertCoordinatePairToVector2(cs[p]);\n            const v2 = this.convertCoordinatePairToVector2(cs[p + 1]);\n\n            const offset = this.computeOffset(v1, v2, lineWidth);\n\n            const newV1 = v1.add(offset);\n            const newV2 = v2.add(offset);\n\n            newCS.push(this.convertVector2ToCoordinatePair(newV1));\n            newCS.push(this.convertVector2ToCoordinatePair(newV2));\n        }\n\n        for (let p = cs.length - 1; p > 0; p--) { //now lets go back towards the start\n\n            const v1 = this.convertCoordinatePairToVector2(cs[p]);\n            const v2 = this.convertCoordinatePairToVector2(cs[p - 1]);\n\n            const offset = this.computeOffset(v1, v2, lineWidth);\n\n            const newV1 = v1.add(offset);\n            const newV2 = v2.add(offset);\n\n            newCS.push(this.convertVector2ToCoordinatePair(newV1));\n            newCS.push(this.convertVector2ToCoordinatePair(newV2));\n        }\n\n        newCS.push(newCS[0]); //add starting coord to close the loop\n        newPS.push(newCS);\n\n        return newPS;\n    }\n\n    public generateSingleBuilding(shapeType: string, f: feature, epsg: EPSG_Type, tile: Tile, flipWinding: boolean, buildings: Buildings) {\n        const buildingMaterial: StandardMaterial = buildings.buildingMaterial;\n        const exaggeration: number = buildings.exaggeration;\n        const defaultBuildingHeight: number = buildings.defaultBuildingHeight;\n        const lineWidth: number = buildings.lineWidth;\n        const pointDiameter: number = buildings.pointDiameter;\n        const retrievalType: RetrievalType = buildings.retrievalType;\n\n        let finalMesh: Mesh | null = null;\n        const arrayOfLines: coordinateArrayOfArrays = [];\n\n        let height = defaultBuildingHeight;\n        if (f.properties.height !== undefined) {\n            height = f.properties.height;\n        }\n        if (f.properties.Story !== undefined) {\n            let stories = Number(f.properties.Story);\n            if (isNaN(stories)) {\n                stories = 0;\n            }\n            if (stories == 0) { //0 just means undefined\n                stories = 1;\n            }\n            height = (stories + 0.5) * 3.0; //not sure if we should do this to account for roof height?\n        }\n\n        if (f.geometry.type == \"Polygon\") {\n            const ps: polygonSet = f.geometry.coordinates as polygonSet;\n            finalMesh = this.processSinglePolygon(ps, epsg, buildingMaterial, exaggeration, height, flipWinding);\n        }\n        else if (f.geometry.type == \"Point\") {\n            const cp: coordinatePair = f.geometry.coordinates as coordinatePair;\n            const v = new Vector2(cp[0], cp[1]);\n            const pos = this.tileSet.ourTileMath.EPSG_to_Game(v, epsg);\n\n            const sphere = MeshBuilder.CreateSphere(\"sphere\", { diameter: pointDiameter }, this.scene);\n\n            sphere.position = pos;\n            finalMesh = sphere;\n        }\n        else if (f.geometry.type == \"MultiPolygon\" || f.geometry.type == \"MultiLineString\") {\n\n            const allMeshes: Mesh[] = [];\n\n            if (f.geometry.type == \"MultiPolygon\") {\n                const mp: multiPolygonSet = f.geometry.coordinates as multiPolygonSet;\n\n                for (let i = 0; i < mp.length; i++) {\n                    const singleMesh = this.processSinglePolygon(mp[i], epsg, buildingMaterial, exaggeration, height, flipWinding);\n                    allMeshes.push(singleMesh);\n                }\n            }\n            if (f.geometry.type == \"MultiLineString\") {\n                //console.log(\"NEW GEOMETRY TYPE: MultiLineString\");\n\n                const ps: polygonSet = f.geometry.coordinates as polygonSet;\n                //console.log(\"lineset set of length: \" + ps.length);              \n\n                for (let i = 0; i < ps.length; i++) {\n                    //console.log(\"  we are looking at lineset: \" + i);\n                    const cs: coordinateSet = ps[i];\n\n                    const newPS: polygonSet = this.convertLineToPolygonSet(cs, lineWidth);\n                    const lineArray: coordinateArray = this.convertLinetoArray(cs, epsg);\n                    arrayOfLines.push(lineArray);\n\n                    const singleMesh = this.processSinglePolygon(newPS, epsg, buildingMaterial, exaggeration, height, flipWinding);\n                    allMeshes.push(singleMesh);\n                }\n            }\n\n            if (allMeshes.length == 0) {\n                console.error(\"found 0 meshes for MultiPolygon, something went wrong in JSON parsing!\");\n            }\n            else if (allMeshes.length == 1) {\n                console.log(\"we only have one mesh, no merge needed!\");\n                finalMesh = allMeshes[0];\n            } else {\n                console.log(\"looks like its time for a merge!\");\n                const merged = Mesh.MergeMeshes(allMeshes);\n                if (merged) {\n                    finalMesh = merged;\n                } else {\n                    console.error(\"unable to merge meshes!\");\n                }\n            }\n        } else {\n            //TODO: support other geometry types? \n            console.error(\"unknown building geometry type: \" + f.geometry.type);\n        }\n\n        if (finalMesh == null) {\n            return;\n        }\n\n        if (f.properties !== undefined) {\n            //console.log(\"storing properties for later use\");\n            finalMesh.metadata = f.properties; //store for user to use later!\n            //console.dir(finalMesh.metadata, { depth: null });\n        }\n\n        finalMesh.name = \"Building\";\n        if (f.id !== undefined) {\n            finalMesh.name = f.id;\n        }\n        if (f.properties.name !== undefined) {\n            finalMesh.name = f.properties.name;\n        }\n\n        if (f.properties.Name !== undefined) { //NOTE: this is not a mistake, look closely and you can see .name vs .Name\n            finalMesh.name = f.properties.Name;\n        }\n        \n        finalMesh.refreshBoundingInfo();\n\n        if (retrievalType == RetrievalType.AllData) { //if we get the data all at once, we don't know what tile it should go on!\n            let boundingInfo = finalMesh.getBoundingInfo();\n\n            // Get the minimum and maximum points of the bounding box\n            let min = boundingInfo.boundingBox.minimumWorld;\n            let max = boundingInfo.boundingBox.maximumWorld;\n\n            // Calculate the center as the midpoint between min and max\n            let center = Vector3.Center(min, max);\n\n            //console.log(\"looking to place: \" + finalMesh.name);\n            //console.log(\"computed center: \" + center);\n\n            const bestTile=this.tileSet.ourTileMath.findBestTile(center)\n\n            if(bestTile){\n                tile=bestTile;\n            }\n        }\n\n        finalMesh.setParent(tile.mesh);\n        finalMesh.freezeWorldMatrix(); //optimization? might want to skip here? hmmm...\n\n        \n\n\n        const building = new TileBuilding(finalMesh, tile);\n\n\n        building.ShapeType = shapeType;\n\n        if (retrievalType == RetrievalType.IndividualTiles) { //we only need to check for duplicates if pulling from individual tiles\n            if (building.isBBoxContainedOnTile == false) {\n                //TODO: check if building is a duplicate\n                if (this.tileSet.isBuildingDuplicate(building)) {\n                    console.log(\"building already exists on another tile! deleting!\");\n                    building.dispose();\n                    return;\n                }\n            }\n            console.log(\"building is an original, adding to tile!\");\n        }\n\n        if (arrayOfLines.length > 0) {\n            building.LineArray = arrayOfLines;\n            building.computeLineSegments();\n        }\n\n        tile.buildings.push(building);\n\n        console.log(\"created \" + finalMesh.name);\n    }\n\n    private convertLinetoArray(cs: coordinateSet, epsg: EPSG_Type): coordinateArray {\n        const vArray: coordinateArray = [];\n\n\n        for (let p = 0; p < cs.length; p++) { //go forward down the line\n\n            const x = cs[p][0];\n            const y = cs[p][1];\n\n            const v2 = new Vector2(x, y);\n\n            const coord = this.tileSet.ourTileMath.EPSG_to_Game(v2, epsg);\n\n            vArray.push(coord);\n        }\n        return vArray;\n    }\n\n    private processSinglePolygon(ps: polygonSet, epsg: EPSG_Type, buildingMaterial: StandardMaterial, exaggeration: number, height: number, flipWinding: boolean): Mesh {\n        const holeArray: Vector3[][] = [];\n        const positions3D: Vector3[] = [];\n\n        for (let i = 0; i < ps.length; i++) {\n            const hole: Vector3[] = [];\n\n            //skip final coord (as it seems to duplicate the first)\n            //also need to do this backwards to get normals / winding correct\n\n            if (flipWinding == false) {\n                for (let e = ps[i].length - 2; e >= 0; e--) {\n\n                    const v2 = new Vector2(ps[i][e][0], ps[i][e][1]);\n                    const coord = this.tileSet.ourTileMath.EPSG_to_Game(v2, epsg);\n\n                    if (i == 0) {\n                        positions3D.push(coord);\n                    } else {\n                        hole.push(coord);\n                    }\n                }\n            } else {\n                for (let e = 0; e < ps[i].length - 1; e++) {\n\n                    const v2 = new Vector2(ps[i][e][0], ps[i][e][1]);\n                    const coord = this.tileSet.ourTileMath.EPSG_to_Game(v2, epsg);\n\n                    if (i == 0) {\n                        positions3D.push(coord);\n                    } else {\n                        hole.push(coord);\n                    }\n                }\n            }\n\n            //we were previous doing this incorrectly,\n            //actully the second polygon is not to be \"merged\", \n            //but actually specifies additional holes\n            //see: https://datatracker.ietf.org/doc/html/rfc7946#page-25\n            if (i > 0) {\n                holeArray.push(hole);\n            }\n        }\n\n        (window as any).earcut = Earcut;\n\n        var orientation = Mesh.DEFAULTSIDE;\n        if (holeArray.length > 0) {\n            orientation = Mesh.DOUBLESIDE; //otherwise we see inside the holes\n        }\n\n        const heightScaleFixer = exaggeration * this.tileSet.tileScale;\n\n        const ourMesh: Mesh = MeshBuilder.ExtrudePolygon(\"extruded polygon\",\n            {\n                shape: positions3D,\n                depth: height * heightScaleFixer,\n                holes: holeArray,\n                sideOrientation: orientation\n            },\n            this.scene);\n\n        ourMesh.position.y = height * heightScaleFixer;\n        ourMesh.material = buildingMaterial; //all buildings will use same material\n        ourMesh.isPickable = false;\n\n        return ourMesh;\n    }\n}\n\n"]}