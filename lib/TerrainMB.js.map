{"version":3,"file":"TerrainMB.js","sourceRoot":"","sources":["../src/TerrainMB.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"@babylonjs/core/scene\";\nimport { Vector2 } from \"@babylonjs/core/Maths/math\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\nimport { FloatArray, Observable, ThinEngine, VertexBuffer } from \"@babylonjs/core\";\nimport Tile from './Tile';\nimport TileSet from \"./TileSet\";\n\n//import \"@babylonjs/core/Materials/standardMaterial\"\n//import \"@babylonjs/inspector\";\n\nexport default class TerrainMB {\n    private mbServer: string = \"https://api.mapbox.com/v4/\";\n\n    public globalMinHeight = Number.POSITIVE_INFINITY;\n    private index = 0;\n    public accessToken: string = \"\";\n    private heightScaleFixer=0;\n    private skuToken: string=\"\";\n    //public onAllLoaded: Observable<boolean> = new Observable();\n\n    constructor(public tileSet: TileSet, private scene: Scene) {\n        if(this.tileSet){\n            if(this.tileSet.ourTileMath){\n                console.log(\"we seem to be able to access tileMath here\");\n\n            } else{\n                console.error(\"unable to access tileMath!\");\n            }\n        } else{\n            console.error(\"unable to access tileSet!\");\n        }  \n        this.skuToken = this.tileSet.ourTileMath.generateSKU();\n          \n    }  \n\n    public setExaggeration(tileScale: number, exaggeration: number) {\n        this.heightScaleFixer = tileScale * exaggeration;\n    }\n\n    //based on code from\n    //https://www.babylonjs-playground.com/#DXARSP#30\n    private GetAsyncTexture (url: string) : Promise<Texture> {\n        return new Promise((resolve, reject) => {\n            var texture = new Texture(url, this.scene, true, false, Texture.NEAREST_SAMPLINGMODE, function() {\n                console.log(\"loading texture success!\");\n                resolve(texture);\n            }, function(message) {\n                reject(message);\n            });    \n        })\n    }\n\n    public updateAllTerrainTiles(exaggeration: number) {\n        this.setExaggeration(this.tileSet.ourTileMath.computeTileScale(), exaggeration);\n\n        for (let t of this.tileSet.ourTiles) {\n            this.updateSingleTerrainTile(t);         \n        }\n\n        //Fix Seams Here\n        /*for (let t of this.ourTiles) {\n            for (let t2 of this.ourTiles) {\n                if ((t.tileCoords.x == (t2.tileCoords.x - 1)) && (t.tileCoords.y == t2.tileCoords.y)) {\n                    if (t.eastSeamFixed == false) {\n                        this.ourMB.fixEastSeam(t,t2);\n                    }\n                }\n                if ((t.tileCoords.x == t2.tileCoords.x) && (t.tileCoords.y == (t2.tileCoords.y+1))) {\n                    if (t.northSeamFixed == false) {\n                        this.ourMB.fixNorthSeam(t,t2);\n                    }\n                }\n                if ((t.tileCoords.x == (t2.tileCoords.x - 1)) && (t.tileCoords.y == (t2.tileCoords.y+1))) {\n                    if (t.northEastSeamFixed == false) {\n                        this.ourMB.fixNorthEastSeam(t,t2);\n                    }\n                }\n            }\n        }\n        */\n        //this.ourMB.getTileTerrain(this.ourTiles[0]); //just one for testing\n    }\n\n    /*public setupTerrainLOD(precisions: number[], distances:number[]) {\n        for (let t of this.ourTiles) {\n\n            for (let i = 0; i < precisions.length; i++) {\n                const precision = precisions[i];\n                const distance = distances[i];\n\n                if(precision>0){\n                    const loadMesh = this.makeSingleTileMesh(t.colRow.x, t.colRow.y, precision);\n                    this.ourMB.applyHeightArrayToMesh(loadMesh, t, precision, -this.globalMinHeight);\n                    loadMesh.material = t.material;\n                    t.mesh.addLODLevel(distance, loadMesh);\n                }\n                else{\n                    t.mesh.addLODLevel(distance,null);\n                }\n            }\n        }\n    }*/\n\n\n    //https://docs.mapbox.com/data/tilesets/reference/mapbox-terrain-dem-v1/\n    public async updateSingleTerrainTile(tile: Tile) {\n        tile.terrainLoaded=false;\n\n        if(tile.tileCoords.z>15 && this.tileSet.doTerrainResBoost==false){            \n            console.log(\"DEM not supported beyond level 15 (if not doing res boost)\");\n            return;\n        }\n        if(tile.tileCoords.z>14 && this.tileSet.doTerrainResBoost==true){            \n            console.log(\"DEM not supported beyond 14 (if doing res boost)\");\n            return;\n        }\n\n        const storedCoords=tile.tileCoords.clone();\n\n        tile.dem = []; //to reclaim memory?\n\n        const prefix = this.mbServer;\n        const boostParam = this.tileSet.doTerrainResBoost ? \"@2x\" : \"\";\n\n        //const mapType = \"mapbox.terrain-rgb\";\n        const mapType = \"mapbox.mapbox-terrain-dem-v1\";\n\n        const extension = \".pngraw\";\n        const skuParam = \"?sku=\" + this.skuToken;\n        const accessParam = \"&access_token=\" + this.accessToken;\n        const url = prefix + mapType + \"/\" + (tile.tileCoords.z) + \"/\" + (tile.tileCoords.x) + \"/\" + (tile.tileCoords.y) + boostParam + extension + skuParam + accessParam;\n\n        console.log(\"trying to get: \" + url);\n       \n        const ourTex: Texture = await this.GetAsyncTexture(url); //wait for loading to be complete\n\n        if (!ourTex){\n            console.error(\"unable to load terrain for: \" + tile.tileCoords);\n            return;\n        }\n        //console.log(\"terrain dimensions: \" + tile.demDimensions);\n\n        const bufferView = await ourTex.readPixels();\n\n        if (!bufferView) {\n            console.error(\"unable to read pixels from texture for terrain tile: \" + tile.tileCoords);\n        }\n\n        const buffer: ArrayBuffer = bufferView!.buffer;\n        const bufferUint: Uint8Array = new Uint8Array(buffer);\n        //console.log(\"terrain buffer dimensions: \" + bufferUint.byteLength)\n\n        if(tile.tileCoords.equals(storedCoords)==false){\n            console.warn(\"looks like tile coords have changed already! bailing on this update for: \" + tile.tileCoords);\n            return;\n        }\n\n        tile.demDimensions = new Vector2(ourTex.getSize().width, ourTex.getSize().height);\n\n        this.convertRGBtoDEM(bufferUint, tile);\n        this.applyDEMToMesh(tile, this.tileSet.meshPrecision);\n\n        tile.terrainLoaded=true;\n\n        this.fixTileSeams();\n\n        /*\n        for(let t of this.tileSet.ourTiles){\n            if(!t.terrainLoaded){\n                return;\n            }\n        }\n\n        this.onAllLoaded.notifyObservers(true);  */\n    }\n\n    private fixTileSeams() {\n        for (let t of this.tileSet.ourTiles) {\n            if(!t.terrainLoaded){               \n                continue;\n            }\n\n            if (!t.northSeamFixed) {\n                //console.log(\"tile doesn't have north seam fixed yet: \" + t.tileCoords);\n                const upperTileCoords = t.tileCoords.clone();\n                upperTileCoords.y--;\n\n                const upperTileCoordsString = upperTileCoords.toString();\n\n                const upperTile = this.tileSet.ourTilesMap.get(upperTileCoordsString);\n                if (upperTile) {\n                    console.log(\"found upper tile for tile: \" + t.tileCoords);\n                    if (upperTile.terrainLoaded) {\n                        this.fixNorthSeam(t, upperTile);\n                    }\n                }\n            }\n            if (!t.eastSeamFixed) {\n                //console.log(\"tile doesn't have east seam fixed yet: \" + t.tileCoords);\n                const rightTileCoords = t.tileCoords.clone();\n                rightTileCoords.x++;\n\n                const rightTileCoordsString = rightTileCoords.toString();\n\n                const rightTile = this.tileSet.ourTilesMap.get(rightTileCoordsString);\n                if (rightTile) {\n                    console.log(\"found right tile for tile: \" + t.tileCoords);\n                    if (rightTile.terrainLoaded) {\n                        this.fixEastSeam(t, rightTile);\n                    }\n                }\n            }\n            if (!t.northEastSeamFixed) {\n                //console.log(\"tile doesn't have east seam fixed yet: \" + t.tileCoords);\n                const upperRightCoords = t.tileCoords.clone();\n                upperRightCoords.x++;\n                upperRightCoords.y--;\n\n                const upperRightCoordsString = upperRightCoords.toString();\n\n                const upperRightTile = this.tileSet.ourTilesMap.get(upperRightCoordsString);\n                if (upperRightTile) {\n                    console.log(\"found upper right tile for tile: \" + t.tileCoords);\n                    if (upperRightTile.terrainLoaded) {\n                        this.fixNorthEastSeam(t, upperRightTile);\n                    }\n                }\n            }\n        }\n    }\n\n    //https://docs.mapbox.com/data/tilesets/guides/access-elevation-data/\n    private convertRGBtoDEM(ourBuff: Uint8Array, tile: Tile) {\n        var heightDEM: number[] = [];\n        let maxHeight = Number.NEGATIVE_INFINITY;\n        let minHeight = Number.POSITIVE_INFINITY;      \n\n        for (let i = 0; i < ourBuff.length; i += 4) {\n            //documentation: height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)\n\n            const R = ourBuff[i + 0];\n            const G = ourBuff[i + 1];\n            const B = ourBuff[i + 2];\n            //const A = image[i + 3]; //unused\n\n            const height = -10000.0 + ((R * 256.0 * 256.0 + G * 256.0 + B) * 0.1);\n            if (height > maxHeight) {\n                maxHeight = height;\n            }\n            if (height < minHeight) {\n                minHeight = height;\n            }\n\n            heightDEM.push(height);\n        }\n        console.log(\"  terrain ranges from : \" + minHeight.toFixed(2) + \" to \" + maxHeight.toFixed(2));\n        console.log(\"  height delta: \" + (maxHeight - minHeight).toFixed(2));\n\n        tile.dem = heightDEM;\n        tile.minHeight = minHeight;\n        tile.maxHeight = maxHeight;\n\n        if(tile.minHeight<this.globalMinHeight){\n            this.globalMinHeight=tile.minHeight;\n        }\n    }\n\n    public applyDEMToMesh(tile: Tile, meshPrecision: number) {\n        const positions = tile.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const subdivisions = meshPrecision + 1;\n\n        for (let y = 0; y < subdivisions; y++) {\n            for (let x = 0; x < subdivisions; x++) {\n                const percent = new Vector2(x / (subdivisions - 1), y / (subdivisions - 1));\n                const demIndex = this.computeIndexByPercent(percent, tile.demDimensions);                \n                const height = (tile.dem[demIndex]) * this.heightScaleFixer;\n                const meshIndex = 1 + (x + y * subdivisions) * 3;\n\n                positions[meshIndex] = height;\n            }\n        }\n\n        tile.mesh.updateVerticesData(VertexBuffer.PositionKind, positions);\n        tile.mesh.refreshBoundingInfo();\n    }\n\n    private computeIndexByPercent(percent: Vector2, maxPixel: Vector2): number {\n        const pixelX = Math.floor(percent.x * (maxPixel.x - 1));\n        const pixelY = Math.floor(percent.y * (maxPixel.y - 1));\n\n        const total = pixelY * maxPixel.x + pixelX;\n        //console.log(\"Percent: \" + percent.x + \" \" + percent.y + \" Pixel: \"+ pixelX + \" \" + pixelY + \" Total: \" + total);\n\n        return total;\n    }\n\n    public fixNorthSeam(tile: Tile, tileUpper: Tile) {\n        const positions1 = tile.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const positions2 = tileUpper.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const subdivisions = this.tileSet.meshPrecision + 1;\n\n        const y1 = 0;\n        const y2 = subdivisions - 1;\n\n        let xStop = subdivisions;\n        if (tile.northEastSeamFixed) {\n            xStop--; //skip corner\n        }\n\n        for (let x = 0; x < xStop; x++) {\n            const meshIndex1 = 1 + (x + y1 * subdivisions) * 3;\n            const meshIndex2 = 1 + (x + y2 * subdivisions) * 3;\n\n            positions1[meshIndex1] = positions2[meshIndex2];\n        }\n\n        tile.mesh.updateVerticesData(VertexBuffer.PositionKind, positions1);\n        tile.mesh.refreshBoundingInfo();\n        tile.northSeamFixed = true;\n    }\n\n    public fixEastSeam(tile: Tile, tileRight: Tile) {\n        const positions1 = tile.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const positions2 = tileRight.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const subdivisions = this.tileSet.meshPrecision + 1;\n\n        const x1 = subdivisions - 1;\n        const x2 = 0;\n\n        let yStart = 0;\n        if (tile.northEastSeamFixed) {\n            yStart++; //skip corner\n        }\n\n        for (let y = yStart; y < subdivisions; y++) {\n\n            const meshIndex1 = 1 + (x1 + y * subdivisions) * 3;\n            const meshIndex2 = 1 + (x2 + y * subdivisions) * 3;\n\n            positions1[meshIndex1] = positions2[meshIndex2];\n        }\n\n        tile.mesh.updateVerticesData(VertexBuffer.PositionKind, positions1);\n        tile.mesh.refreshBoundingInfo();\n        tile.eastSeamFixed = true;\n    }\n\n    public fixNorthEastSeam(tile: Tile, tileUpperRight: Tile) {\n        const positions1 = tile.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const positions2 = tileUpperRight.mesh.getVerticesData(VertexBuffer.PositionKind) as FloatArray;\n        const subdivisions = this.tileSet.meshPrecision + 1;\n\n        const x1 = subdivisions - 1;\n        const x2 = 0;\n\n        const y1 = 0;\n        const y2 = subdivisions - 1;\n\n        const meshIndex1 = 1 + (x1 + y1 * subdivisions) * 3;\n        const meshIndex2 = 1 + (x2 + y2 * subdivisions) * 3;\n\n        positions1[meshIndex1] = positions2[meshIndex2];\n\n        tile.mesh.updateVerticesData(VertexBuffer.PositionKind, positions1);\n        tile.mesh.refreshBoundingInfo();\n        tile.northEastSeamFixed = true;\n    }\n    \n    /*\n    //DEM Version of seam fixing\n    public fixNorthSeam(tile: Tile, tileUpper: Tile){\n        const dem1=tile.dem;\n        const dem2=tileUpper.dem;\n        const dimensions=tile.demDimensions;\n\n        for(let x=0; x<dimensions.x;x++){\n            const pos1Index=x;\n            const pos2Index=x+dimensions.x*(dimensions.y-1); //last row\n\n            const height1=dem1[pos1Index];\n            const height2=dem2[pos2Index];\n\n            dem1[pos1Index]=height2;\n        }      \n\n        tile.northSeamFixed = true;\n    }\n\n    //DEM Version of seam fixing\n    public fixEastSeam(tile: Tile, tileRight: Tile) {\n        //console.log(\"fixing right seam!\");\n        //console.log(\"dem size: \"+ tile.dem.length);\n        const dem1 = tile.dem;\n        const dem2 = tileRight.dem;\n        const dimensions = tile.demDimensions;\n        //console.log(\"dem dimensions: \" + dimensions.x + \" \" + dimensions.y);\n\n        for (let y = 0; y < dimensions.y; y++) {\n            const pos1Index = (dimensions.x - 1) + y * dimensions.x; //right most col\n            const pos2Index = y * dimensions.x; //left most col\n\n            const height1=dem1[pos1Index];\n            const height2 = dem2[pos2Index];\n\n            dem1[pos1Index]=height2;\n        }       \n\n        tile.eastSeamFixed = true;\n    }\n    \n    //DEM Version of seam fixing\n    public fixNorthEastSeam(tile: Tile, tileUpperRight: Tile) {\n\n        //console.log(\"dem size: \"+ tile.dem.length);\n        const dem1 = tile.dem;\n        const dem2 = tileUpperRight.dem;\n        const dimensions = tile.demDimensions;\n\n        const pos1Index = (dimensions.x - 1); //upper right\n        const pos2Index = (dimensions.y - 1) * dimensions.x; //lower left\n\n        const height1 = dem1[pos1Index];\n        const height2 = dem2[pos2Index];\n\n        dem1[pos1Index] = height2;\n    \n        tile.northEastSeamFixed = true;\n    }\n    */\n}"]}