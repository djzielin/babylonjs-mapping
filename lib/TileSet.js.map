{"version":3,"file":"TileSet.js","sourceRoot":"","sources":["../src/TileSet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"@babylonjs/core/scene\";\nimport { Engine, EngineStore, BoundingBox } from \"@babylonjs/core\";\nimport { Vector2, Vector3, Color3 } from \"@babylonjs/core/Maths/math\";\nimport { MeshBuilder } from \"@babylonjs/core/Meshes/meshBuilder\"\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\nimport { AdvancedDynamicTexture } from \"@babylonjs/gui\";\nimport { Observable } from \"@babylonjs/core\";\n\nimport Tile from './Tile';\nimport MapBox from \"./TerrainMB\";\nimport TileMath, { EPSG_Type } from './TileMath';\nimport Attribution from \"./Attribution\";\nimport Buildings from './Buildings';\nimport TileBuilding from \"./TileBuilding\";\n\nimport \"@babylonjs/core/Materials/standardMaterial\"\nimport \"@babylonjs/inspector\";\nimport '@babylonjs/core/Debug/debugLayer';\nimport Raster from \"./Raster\";\nimport RasterOSM from \"./RasterMB\";\nimport TerrainMB from \"./TerrainMB\";\n\nenum TileRequestType{\n    LoadTile,\n}\n\ninterface TileRequest {\n    requestType: TileRequestType\n    tile: Tile;\n    tileCoords: Vector3;\n    url: string;\n    mesh: Mesh;\n    texture: Texture | null;\n    inProgress: boolean;\n}\n\nexport default class TileSet {\n\n    private xmin: number;\n    private zmin: number;\n    private xmax: number; \n    private zmax: number;\n\n    public ourTiles: Tile[]=[];\n    public ourTilesMap: Map<string,Tile>=new Map();\n\n    public doRasterResBoost=true;\n    public doTerrainResBoost=false;\n\n    public zoom = 0;\n    private tileCorner: Vector2;\n    public centerCoords: Vector2;\n    public tileScale: number;\n    public hasAlpha=false;\n\n    public streetExtensionAmount=0.25; //TODO; fix this to be in some sort of units that make sense, instead of game-world coordinates. \n\n    private ourRasterProvider: Raster;\n    //private accessToken: string;\n\n    public ourTerrainMB: TerrainMB;\n    private totalWidthMeters: number;\n    private totalHeightMeters: number;\n    public ourAttribution: Attribution;\n    public ourTileMath: TileMath;\n\n    protected tileRequests: TileRequest[]=[];\n    protected requestsProcessedSinceCaughtUp=0;\n    public onCaughtUpObservable: Observable<boolean>=new Observable;\n\n    public numTiles: Vector2;\n    public tileWidth: number;\n    public meshPrecision: number;\n    private isGeometrySetup: boolean=false;\n\n    /**\n    * this doesn't do much, just sets up a linkage between our library and users main project\n    * @param scene the babylonjs scene, helps us get around a bug, where the main app and the library are in 2 different contexts\n    * @param engine see above description for scene\n    */\n    constructor(public scene: Scene, private engine: Engine) {\n\n        EngineStore._LastCreatedScene=this.scene; //gets around a babylonjs bug where we aren't in the same context between the main app and the mapping library\n        EngineStore.Instances.push(this.engine);\n      \n        this.ourAttribution = new Attribution(this.scene);\n        this.ourTileMath= new TileMath(this); \n\n        this.setRasterProvider(new RasterOSM(this)); //set default raster basemap to OSM\n        this.ourTerrainMB = new TerrainMB(this, this.scene); //TODO: this should really be a terrain provider, in case we can get terrain from more than just MapBox\n\n\n        const observer = this.scene.onBeforeRenderObservable.add(() => { //fire every frame\n            this.processTileRequests(); //TODO: investigate WebWorker or other \"threading\" techniques, instead of calling every frame\n         });\n    }\n\n    /**\n    * setup a ground plane tile set. this sets up just the underlying meshes, but doesn't populate them with content yet\n    * @param numTiles how many tiles in the x and y directions\n    * @param tileWidth width in meters of a single tile\n    * @param meshPrecision how many numTiles in each tile's mesh. need more for terrain type meshes, less if no height change on mesh. \n    */\n    public createGeometry( numTiles: Vector2,  tileWidth: number,  meshPrecision: number)\n    {        \n        //inspiration from this example: https://www.babylonjs-playground.com/#866PVL#5\n\n        this.numTiles=numTiles;\n        this.tileWidth=tileWidth;\n        this.meshPrecision=meshPrecision;\n\n        this.totalWidthMeters=tileWidth*numTiles.x;\n        this.totalHeightMeters=tileWidth*numTiles.y;\n\n        this.xmin = -this.totalWidthMeters / 2;\n        this.zmin = -this.totalHeightMeters / 2;\n        this.xmax = this.totalWidthMeters / 2;\n        this.zmax = this.totalHeightMeters / 2;\n\n        for (let y = 0; y < this.numTiles.y; y++) {\n            for (let x = 0; x < this.numTiles.x; x++) {\n                const mesh=this.makeSingleTileMesh(x,y,this.meshPrecision);\n                const t = new Tile(mesh, this);\n                this.ourTiles.push(t);               \n            }\n        }\n\n        this.isGeometrySetup=true;\n    }   \n\n    protected prettyName(): string {\n        return \"[Tile] \";\n    }\n\n    public processTileRequests() {\n        if(this.isGeometrySetup==false){\n            return;\n        }\n\n        if (this.tileRequests.length == 0) {\n            if (this.requestsProcessedSinceCaughtUp > 0) {\n                console.log(this.prettyName() + \"caught up on all tile generation requests! (processed \" + this.requestsProcessedSinceCaughtUp + \" requests)\");\n                this.requestsProcessedSinceCaughtUp = 0;\n                this.onCaughtUpObservable.notifyObservers(true);\n            }\n            return;\n        }\n\n        //console.log(\"tile requests remaining in queue: \" + this.tileRequests.length);\n        const request = this.tileRequests[0];\n\n        if (request.requestType == TileRequestType.LoadTile) {\n            if (request.inProgress == false) {\n                console.log(this.prettyName() + \"trying to load tile raster: \" + request.url);\n                request.texture = new Texture(request.url, this.scene);\n                request.inProgress = true;\n                return;\n            }\n            if (request.inProgress == true) {\n                if (request.texture) {\n                    if (request.texture.isReady()) {\n                        console.log(this.prettyName() + \"tile raster is ready: \" + request.url);\n\n                        const material = request.mesh.material as StandardMaterial;\n                        material.unfreeze();\n\n                        material.diffuseTexture = request.texture;\n                        material.diffuseTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n                        material.diffuseTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n                        material.diffuseTexture.hasAlpha=this.hasAlpha;\n\n                        material.freeze(); //optimization\n\n                        request.mesh.setEnabled(true); //show it!\n                        this.requestsProcessedSinceCaughtUp++;\n                        this.tileRequests.shift(); //pop request off front of queue\n                        return;\n                    }\n                    if(request.texture.loadingError){\n                        console.warn(this.prettyName() + \"error loading texture for: \" + request.url);\n\n                        this.requestsProcessedSinceCaughtUp++;\n                        this.tileRequests.shift(); //pop request off front of queue\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    public getAdvancedDynamicTexture(): AdvancedDynamicTexture{\n        return this.ourAttribution.advancedTexture;\n    }\n\n    public makeSingleTileMesh(x: number, y: number, precision: number): Mesh {\n        const ground = MeshBuilder.CreateGround(\"tile\", { width: this.tileWidth, height: this.tileWidth, updatable: true, subdivisions: precision }, this.scene);\n        ground.position.z = this.zmin + (y + 0.5) * this.tileWidth;\n        ground.position.x = this.xmin + (x + 0.5) * this.tileWidth;\n       \n        //ground.bakeCurrentTransformIntoVertices(); //optimization\n        //ground.freezeWorldMatrix(); //optimization\n\n        return ground;\n    }\n\n    public isBuildingDuplicate(newBuilding: TileBuilding){\n        for(let t of this.ourTiles){\n            for(let existingBuilding of t.buildings){\n                if(existingBuilding.isBBoxContainedOnTile){\n                    continue; //don't need to consider buildings fully contained on a tile\n                } else{\n                    if(existingBuilding.doVerticesMatch(newBuilding)){\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public disableGroundCulling(){\n        for(let t of this.ourTiles){\n            t.mesh.alwaysSelectAsActiveMesh = true;\n        }\n    }\n\n    public setRasterProvider(rp:Raster){\n        this.ourRasterProvider=rp;  \n    }    \n\n    /**\n    * update all the tiles in the tileset\n    * @param lat latitude. conceptually the y position in decimal\n    * @param lon longitude. conceptually the x position in decimal\n    * @param zoom standard tile mapping zoom levels 0 (whole earth) - 20 (building)\n    */\n    public updateRaster(lat: number, lon: number, zoom: number) {\n        if(this.isGeometrySetup==false){\n            console.error(\"can't updateRaster! geometry not setup yet!\");\n            return;\n        }\n\n        this.zoom = zoom;\n        this.centerCoords = new Vector2(lon, lat); \n        this.tileCorner = this.ourTileMath.computeCornerTile(this.centerCoords,EPSG_Type.EPSG_4326,this.zoom);\n        this.tileScale=this.ourTileMath.computeTileScale();\n\n\n        this.ourAttribution.addAttribution(this.ourRasterProvider.name);\n\n        //console.log(\"Tile Base: \" + this.tileCorner);\n\n        let tileIndex = 0;\n        for (let y = 0; y < this.numTiles.y; y++) {\n            for (let x = 0; x < this.numTiles.x; x++) {\n                const tileX = this.tileCorner.x + x;\n                const tileY = this.tileCorner.y - y;\n                const tile=this.ourTiles[tileIndex];\n                this.updateSingleRasterTile(tile,tileX,tileY);\n                tileIndex++;\n            }\n        }\n    }\n\n    private updateSingleRasterTile( tile: Tile, tileX: number, tileY: number) {\n        tile.tileCoords = new Vector3(tileX, tileY, this.zoom); //store for later     \n        this.ourTilesMap.set(tile.tileCoords.toString(),tile);\n\n        tile.mesh.setEnabled(false);\n        let material: StandardMaterial;\n\n        if (tile.material) {\n            material = tile.material;\n            material.unfreeze();\n\n            const texture = material.diffuseTexture;\n\n            if (texture) { //get rid of texture if it already exists  \n                texture.dispose(); \n            }\n        }\n        else {\n            material = new StandardMaterial(\"material\" + tileX + \"-\" + tileY, this.scene);\n            material!.specularColor = new Color3(0, 0, 0);\n            material.alpha = 1.0;\n\n            tile.mesh.material = material;\n            tile.material = material;   \n            // material.backFaceCulling = false;\n        }\n\n        let url: string = \"\";\n\n        url = this.ourRasterProvider.getRasterURL(new Vector2(tileX, tileY), this.zoom);\n      \n        const request: TileRequest = {\n            requestType: TileRequestType.LoadTile,\n            tile: tile,\n            tileCoords: tile.tileCoords.clone(),\n            url: url,\n            mesh: tile.mesh,\n            texture: null,\n            inProgress: false           \n        }\n        this.tileRequests.push(request); \n        console.log(this.prettyName() + \"submitted tile raster load request for: \" + tile.tileCoords + \" URL: \" + url);\n    \n        tile.mesh.name=\"Tile_\"+tileX + \"_\"+tileY;\n    }\n\n    /**\n    * moves all the tiles in the set. when a tile reaches the edge, it is moved\n    * to the opposite side of the tileset, e.g. a tile comes off the right \n    * edge and moves to the left edge. useful for trying to achieve an endless\n    * scrolling type effect, where the user doesn't move but the ground \n    * underneath does\n    * @param movX x, ie left-right amount to move\n    * @param movZ z, ie forward-back amount to move \n    * @param reloadLimitPerFrame limit how many tiles we update per frame, to prevent stuttering\n    * @param doBuildingsOSM should we spawn OSM Buildings on the new tile?\n    * @param doMerge should we merge all those OSM Buildings into one mesh? as an optimization\n    */\n    public moveAllTiles(movX: number, movZ: number, reloadLimitPerFrame: number, buildingCreator: Buildings | null) {\n        for (const t of this.ourTiles) {\n            t.mesh.position.x += movX;\n            t.mesh.position.z += movZ;\n        }\n\n        let tilesReloaded=0;\n\n        for (const t of this.ourTiles) {\n            if (t.mesh.position.x<this.xmin){\n                console.log(\"Tile: \" + t.tileCoords + \" is below xMin\");\n                this.moveHelper(t, new Vector3(this.totalWidthMeters,0,0), new Vector3(this.numTiles.x,0,0), buildingCreator);\n                \n                tilesReloaded++;\n                if(tilesReloaded<reloadLimitPerFrame){\n                    return;\n                } \n            }\n\n            if(t.mesh.position.x>this.xmax){\n                console.log(\"Tile: \" + t.tileCoords + \" is above xMax\");\n                \n                this.moveHelper(t, new Vector3(-this.totalWidthMeters,0,0), new Vector3(-this.numTiles.x,0,0), buildingCreator);\n                \n                tilesReloaded++;\n                if(tilesReloaded<reloadLimitPerFrame){\n                    return;\n                }                \n            }\n            if(t.mesh.position.z<this.zmin){\n                console.log(\"Tile: \" + t.tileCoords + \" is below zmin\");\n\n                this.moveHelper(t, new Vector3(0,0,this.totalHeightMeters), new Vector3(0,-this.numTiles.y,0), buildingCreator);\n                \n                tilesReloaded++;\n                if(tilesReloaded<reloadLimitPerFrame){\n                    return;\n                }            \n            }\n            if(t.mesh.position.z>this.zmax){\n                console.log(\"Tile: \" + t.tileCoords + \" is above zmax\");\n\n                this.moveHelper(t, new Vector3(0,0,-this.totalHeightMeters), new Vector3(0,this.numTiles.y,0), buildingCreator);\n                \n                tilesReloaded++;\n                if(tilesReloaded<reloadLimitPerFrame){\n                    return;\n                }      \n            }           \n        }\n    }\n\n    private moveHelper(t: Tile, meshMoveAmount: Vector3, tileCoordAdjustment: Vector3, buildingCreator: Buildings | null) {\n\n        t.deleteBuildings();\n\n        t.mesh.position = t.mesh.position.add(meshMoveAmount);\n        this.ourTilesMap.delete(t.tileCoords.toString());\n\n        let newTileCoords = t.tileCoords.add(tileCoordAdjustment);\n        this.updateSingleRasterTile(t, newTileCoords.x, newTileCoords.y);\n\n        if (buildingCreator) {\n            buildingCreator.SubmitLoadTileRequest(t);\n        }\n    }\n\n    public async generateTerrain(exaggeration: number) {\n        await this.ourTerrainMB.updateAllTerrainTiles(exaggeration);\n    }\n\n    public getTerrainLowestY(): number {\n        return this.ourTerrainMB.globalMinHeight;\n    }\n}"]}