{"version":3,"file":"BuildingsOSM.js","sourceRoot":"","sources":["../src/BuildingsOSM.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAEvC,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAiB,MAAM,WAAW,CAAC;AAI7D,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,SAAS;IAI/C,YAAY,OAAgB,EAAE,iBAAiB,GAAC,iBAAiB,CAAC,MAAM;QACpE,KAAK,CAAC,KAAK,EAAE,OAAO,EAAC,iBAAiB,CAAC,CAAC;QAJpC,cAAS,GAAG,CAAC,CAAC;QACf,gBAAW,GAAW,EAAE,CAAC,CAAC,iDAAiD;QAY1E,uBAAkB,GAAa;YACnC,sCAAsC,EAAE,iDAAiD;YACzF,sCAAsC;YACtC,sCAAsC;YACtC,sCAAsC;YAEtC,wDAAwD;YACxD,wDAAwD;YACxD,wDAAwD;YACxD,uDAAuD;SAC1D,CAAC;IAlBF,CAAC;IAEe,iBAAiB;QAC7B,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;IAckB,eAAe,CAAC,QAAgB;QAC/C,MAAM,YAAY,GAAC,EAAE,CAAC,CAAC,IAAI;QAC3B,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC9C,8CAA8C;QAC9C,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,qBAAqB,CAAC,IAAU;QACnC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;YACzB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,sDAAsD,CAAC,CAAC;YAClI,OAAO;QACX,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAE7C,MAAM,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,GAAG,OAAO,GAAC,SAAS,GAAC,IAAI,CAAC,WAAW,CAAC;QACxJ,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,0CAA0C;QAElH,MAAM,OAAO,GAAoB;YAC7B,WAAW,EAAE,mBAAmB,CAAC,QAAQ;YACzC,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,YAAY;YACxB,QAAQ,EAAE,SAAS,CAAC,SAAS;YAC7B,GAAG,EAAE,GAAG;YACR,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,IAAI;SACpB,CAAA;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAEM,oBAAoB;QACvB,OAAO,CAAC,KAAK,CAAC,yFAAyF,CAAC,CAAC;IAC7G,CAAC;CACJ","sourcesContent":["import { EPSG_Type } from \"./TileMath\";\nimport { BuildingRequest } from \"./Buildings\";\nimport { BuildingRequestType } from \"./Buildings\";\nimport { RetrievalLocation, RetrievalType } from \"./TileSet\";\n\nimport Tile from \"./Tile\";\nimport TileSet from \"./TileSet\";\nimport Buildings from \"./Buildings\";\n\nexport default class BuildingsOSM extends Buildings {\n    private serverNum = 0;\n    public accessToken: string = \"\"; //new for 2024 osmbuildings seem to now be onegeo\n\n    constructor(tileSet: TileSet, retrievalLocation=RetrievalLocation.Remote) {\n        super(\"OSM\", tileSet,retrievalLocation);\n    }\n\n    public override generateBuildings() {\n        super.generateBuildings();\n\n        this.tileSet.ourAttribution.addAttribution(\"OSMB\");\n    }\n\n    private osmBuildingServers: string[] = [\n        \"https://a-data.onegeo.co/maps/tiles/\", //new for 2024 osmbuildings seem to now be onegeo\n        \"https://b-data.onegeo.co/maps/tiles/\",\n        \"https://c-data.onegeo.co/maps/tiles/\",\n        \"https://d-data.onegeo.co/maps/tiles/\"\n        \n        //\"https://a.data.osmbuildings.org/0.2/anonymous/tile/\",\n        //\"https://b.data.osmbuildings.org/0.2/anonymous/tile/\",\n        //\"https://c.data.osmbuildings.org/0.2/anonymous/tile/\",\n        //\"https://d.data.osmbuildings.org/0.2/anonymous/tile/\"\n    ];\n\n    protected override stripFilePrefix(original: string): string {\n        const prefixLength=35; //51\n        const stripped = original.slice(prefixLength);\n        //console.log(\"new file URL is: \" + stripped);\n        return stripped;\n    }\n\n    public SubmitLoadTileRequest(tile: Tile) {\n        if (tile.tileCoords.z > 16) {\n            console.error(this.prettyName() + \"Zoom level of: \" + tile.tileCoords.z + \" is too large! This means that buildings won't work!\");\n            return;\n        }\n\n        const storedCoords = tile.tileCoords.clone();\n\n        const url = this.osmBuildingServers[this.serverNum] + storedCoords.z + \"/\" + storedCoords.x + \"/\" + storedCoords.y + \".json\"+\"?token=\"+this.accessToken;\n        this.serverNum = (this.serverNum + 1) % this.osmBuildingServers.length; //increment server to use with wrap around\n\n        const request: BuildingRequest = {\n            requestType: BuildingRequestType.LoadTile,\n            tile: tile,\n            tileCoords: storedCoords,\n            epsgType: EPSG_Type.EPSG_4326,\n            url: url,\n            inProgress: false,\n            flipWinding: true\n        }\n        this.buildingRequests.push(request);\n    }       \n\n    public SubmitLoadAllRequest() {\n        console.error(\"asking for all OSM data doesn't make sense, you should use the individual request type!\");\n    }\n}\n\n"]}