{"version":3,"file":"Tile.js","sourceRoot":"","sources":["../src/Tile.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAMrD,OAAO,EAAE,WAAW,EAAE,MAAM,qCAAqC,CAAC;AAOlE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,qDAAqD;AACrD,gCAAgC;AAEhC,MAAM,CAAC,OAAO,OAAO,IAAI;IAwBrB,YAAmB,IAAU,EAAS,OAAgB;QAAnC,SAAI,GAAJ,IAAI,CAAM;QAAS,YAAO,GAAP,OAAO,CAAS;QAnBtD,kCAAkC;QAClC,YAAY;QACZ,kCAAkC;QAC3B,cAAS,GAAiB,EAAE,CAAC;QAC7B,uBAAkB,GAAmB,SAAS,CAAC;QAS/C,kBAAa,GAAC,KAAK,CAAC;QAEpB,kBAAa,GAAG,KAAK,CAAC;QACtB,mBAAc,GAAG,KAAK,CAAC;QACvB,uBAAkB,GAAG,KAAK,CAAC;QAG9B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,6FAA6F;QAE5H,MAAM,WAAW,GAAgB,IAAI,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC;QACpE,MAAM,WAAW,GAAY,WAAW,CAAC,YAAY,CAAC;QACtD,MAAM,WAAW,GAAY,WAAW,CAAC,YAAY,CAAC;QAEtD,MAAM,MAAM,GAAG,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;QAE5D,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE7C,oCAAoC;QACpC;;;;;;;;;UASE;IACN,CAAC;IAEO,UAAU,CAAC,CAAU,EAAE,IAAY;QACvC,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACzF,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;QACpB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACvB,CAAC;IAEM,eAAe;QAClB,KAAI,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAC,CAAC;YACzB,CAAC,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,SAAS,GAAC,EAAE,CAAC;QAElB,IAAG,IAAI,CAAC,kBAAkB,KAAG,SAAS,EAAC,CAAC;YACpC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QACtC,CAAC;IACL,CAAC;IAEM,uBAAuB;QAC1B,KAAI,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAC,CAAC;YACzB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;IACL,CAAC;IAEM,oBAAoB;QACvB,MAAM,SAAS,GAAS,EAAE,CAAC;QAE3B,KAAI,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAC,CAAC;YACzB,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,+BAA+B,CAAC,CAAO;QAC1C,MAAM,CAAC,GAAiB,CAAC,CAAC,eAAe,EAAE,CAAC;QAE5C,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { Vector2 } from \"@babylonjs/core/Maths/math\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport { BoundingInfo } from \"@babylonjs/core/Culling/boundingInfo\";\nimport TileBuilding from \"./TileBuilding\";\n\nimport { BoundingBox } from \"@babylonjs/core/Culling/boundingBox\";\n\nimport { FloatArray, Material, Rotate2dBlock, VertexBuffer } from \"@babylonjs/core\";\nimport Earcut from 'earcut';\nimport { fetch } from 'cross-fetch'\nimport Buildings from \"./Buildings\";\nimport TileSet from \"./TileSet\";\nimport { MeshBuilder } from \"@babylonjs/core\";\n\n//import \"@babylonjs/core/Materials/standardMaterial\"\n//import \"@babylonjs/inspector\";\n\nexport default class Tile {\n    public material: StandardMaterial;\n    public tileCoords: Vector3;\n    public box2D: BoundingBox;\n    \n    //////////////////////////////////\n    // BUILDINGS\n    //////////////////////////////////\n    public buildings: TileBuilding[]=[];\n    public mergedBuildingMesh: Mesh | undefined=undefined;\n\n    //////////////////////////////////\n    // TERRAIN \n    //////////////////////////////////\n    public dem: number[];\n    public demDimensions: Vector2;\n    public minHeight: number;\n    public maxHeight: number;\n    public terrainLoaded=false;\n\n    public eastSeamFixed = false;\n    public northSeamFixed = false;\n    public northEastSeamFixed = false;\n\n    constructor(public mesh: Mesh, public tileSet: TileSet) {\n        mesh.computeWorldMatrix(true); //we were previously missing this, which caused a bug in the computation of the tile bounds! \n\n        const originalBox: BoundingBox = mesh.getBoundingInfo().boundingBox;\n        const originalMin: Vector3 = originalBox.minimumWorld;\n        const originalMax: Vector3 = originalBox.maximumWorld;\n\n        const newMin = new Vector3(originalMin.x, -1, originalMin.z);\n        const newMax = new Vector3(originalMax.x, 1, originalMax.z);\n\n        this.box2D = new BoundingBox(newMin, newMax);\n\n        //code for debugging the tile bounds\n        /*const p1 = new Vector3(originalMin.x, 0, originalMin.z);\n        const p2 = new Vector3(originalMax.x, 0, originalMax.z);\n        const p3 = new Vector3(originalMin.x, 0, originalMax.z);\n        const p4 = new Vector3(originalMax.x, 0, originalMin.z);\n\n        this.makeSphere(p1, this.mesh.name + \" p1\");\n        this.makeSphere(p2, this.mesh.name + \" p2\");\n        this.makeSphere(p3, this.mesh.name + \" p3\");\n        this.makeSphere(p4, this.mesh.name + \" p4\");\n        */\n    }\n\n    private makeSphere(p: Vector3, name: string) { //for debugging\n        const sphere = MeshBuilder.CreateSphere(\"sphere\", { diameter: 1.0 }, this.tileSet.scene);\n        sphere.position = p;\n        sphere.name = name;\n    }\n\n    public deleteBuildings(){\n        for(let m of this.buildings){\n            m.dispose();\n        }\n        this.buildings=[];\n\n        if(this.mergedBuildingMesh!==undefined){\n            this.mergedBuildingMesh.dispose();\n        }\n    }\n\n    public hideIndividualBuildings(){\n        for(let m of this.buildings){\n            m.mesh.setEnabled(false);\n        }\n    }\n\n    public getAllBuildingMeshes(){\n        const ourMeshes: Mesh[]=[];\n\n        for(let b of this.buildings){\n            ourMeshes.push(b.mesh);\n        }\n\n        return ourMeshes;\n    }   \n\n    public isBuildingInsideTileBoundingBox(m: Mesh): Boolean {\n        const b: BoundingInfo = m.getBoundingInfo();\n   \n        return true;\n    }\n}"]}