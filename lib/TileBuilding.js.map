{"version":3,"file":"TileBuilding.js","sourceRoot":"","sources":["../src/TileBuilding.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector3 } from \"@babylonjs/core/Maths/math\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer\";\r\nimport Tile from \"./Tile\";\r\nimport TileMath, { EPSG_Type } from \"./TileMath\";\r\nimport { coordinateArrayOfArrays} from \"./GeoJSON\";\r\n\r\nexport interface LineSegment {\r\n    p1: Vector2;\r\n    p2: Vector2;\r\n } \r\n\r\n export interface LineTestReturnPacket{\r\n    p: Vector3;\r\n    dir1: Vector3;\r\n    dir2: Vector3;\r\n }\r\n\r\nexport interface LineSegmentArray extends Array<LineSegment> { }\r\n\r\nexport default class TileBuilding {\r\n    public isBBoxContainedOnTile: boolean=false;\r\n    public ShapeType: String=\"\";\r\n\r\n    public LineArray: coordinateArrayOfArrays;\r\n    public LineSegments: LineSegmentArray=[];\r\n\r\n    public verticies: Vector3[]=[];\r\n\r\n    private tm: TileMath;\r\n\r\n    constructor(public mesh: Mesh, public tile: Tile) {\r\n        this.tm=this.tile.tileSet.ourTileMath;\r\n\r\n        this.getVerticies();\r\n        this.computeBuildingBoxInsideTile();     \r\n    }\r\n\r\n    public computeLineSegments(){\r\n        const ext=this.tile.tileSet.streetExtensionAmount;\r\n\r\n        for(let singleArray of this.LineArray){\r\n            for (let i = 0; i < singleArray.length-1; i++) {\r\n                let p1=this.tm.v3_to_v2(singleArray[i]);\r\n                let p2=this.tm.v3_to_v2(singleArray[i+1]);\r\n                \r\n                if(i==0){ //first coordinate\r\n                    const dir=p1.subtract(p2);\r\n                    const dirNormalized=dir.normalizeToNew();\r\n                    const extensionVec=dirNormalized.multiplyByFloats(ext,ext);\r\n                    p1=p1.add(extensionVec); //push p1 back just a bit\r\n                }\r\n                if(i==singleArray.length-2){ //last coordinate\r\n                    const dir=p2.subtract(p1);\r\n                    const dirNormalized=dir.normalizeToNew();\r\n                    const extensionVec=dirNormalized.multiplyByFloats(ext,ext);\r\n                    p2=p2.add(extensionVec); //push p2 forward just a bit\r\n                }\r\n                \r\n                const segment: LineSegment={\r\n                    p1: p1,\r\n                    p2: p2\r\n                };\r\n                this.LineSegments.push(segment);                \r\n            }\r\n        }\r\n    }\r\n\r\n    private computeDir(seg: LineSegment): Vector2{\r\n        const v1=seg.p1;\r\n        const v2=seg.p2\r\n\r\n        return v2.subtract(v1).normalize();\r\n    }\r\n\r\n    public findLineIntersectionPoint(otherStreet: TileBuilding): LineTestReturnPacket | false{\r\n        const tm=this.tile.tileSet.ourTileMath;\r\n\r\n        for(let l1_segment of this.LineSegments){\r\n            for(let l2_segment of otherStreet.LineSegments){\r\n                const result=tm.line_segment_intersect(l1_segment.p1, l1_segment.p2,l2_segment.p1,l2_segment.p2);\r\n\r\n                if(result){\r\n                    const result_v2=result as Vector2;                   \r\n\r\n                    return {\r\n                        p: this.tm.v2_to_v3(result_v2),\r\n                        dir1: this.tm.v2_to_v3(this.computeDir(l1_segment)),\r\n                        dir2: this.tm.v2_to_v3(this.computeDir(l2_segment))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(){\r\n        this.mesh.dispose();\r\n        this.verticies=[];\r\n    }\r\n\r\n    //https://forum.babylonjs.com/t/is-there-any-way-to-get-the-vertices-of-a-given-mesh-facet-or-get-neighbouring-facets/19888/4\r\n    public getVerticies() {\r\n        const vd = this.mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        if (vd === null) {\r\n            return;\r\n        }\r\n\r\n        const worldMatrix=this.mesh.getWorldMatrix();\r\n\r\n        for (var i = 0; i < vd.length; i += 3) {\r\n            const x = vd[i + 0];\r\n            const y = vd[i + 1];\r\n            const z = vd[+ 2];\r\n\r\n            const localVector=new Vector3(x, y, z);\r\n            const worldVector=Vector3.TransformCoordinates(localVector,worldMatrix);\r\n\r\n            this.verticies.push(worldVector);\r\n        }\r\n    }\r\n\r\n    public computeBuildingBoxInsideTile() {\r\n        console.log(\"trying to compute if: \" + this.mesh.name + \" is completely inside tile: \" + this.tile.mesh.name);\r\n        const mBounds=this.mesh.getBoundingInfo().boundingBox;\r\n\r\n        let bboxPointsInsideTile=0;\r\n\r\n        for(let v of mBounds.vectorsWorld){\r\n            const vNoY=new Vector3(v.x,0,v.z);\r\n\r\n            /*if(this.mesh.name.includes(\"Lewis\")){ //from when we were troubleshooting the bounds calc in Tile.ts\r\n                const sphere = MeshBuilder.CreateSphere(\"sphere\", { diameter: 0.25 },this.tile.tileSet.scene);\r\n                sphere.position=vNoY;\r\n            }*/\r\n\r\n            if(this.tile.box2D.intersectsPoint(vNoY)){\r\n                bboxPointsInsideTile++;\r\n            }\r\n        }\r\n        if(bboxPointsInsideTile==8){\r\n            this.isBBoxContainedOnTile=true;\r\n        } else{\r\n            this.isBBoxContainedOnTile=false;\r\n        }\r\n    }\r\n\r\n    public doVerticesMatch( otherBuilding: TileBuilding): boolean{\r\n        if(this.verticies.length!=otherBuilding.verticies.length){\r\n            return false;\r\n        }\r\n\r\n        let accumulatedError=0.0;\r\n\r\n        for(let i=0;i<this.verticies.length;i++){\r\n            const v1=this.verticies[i];\r\n            const v2=otherBuilding.verticies[i];\r\n\r\n            const diffVector=v1.subtract(v2);\r\n            const length=diffVector.length();\r\n            accumulatedError+=length;\r\n        }\r\n\r\n        console.log(\"accumulated error for: \" + this.mesh.name + \": \" + accumulatedError);\r\n\r\n        if(accumulatedError<0.00001){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n"]}