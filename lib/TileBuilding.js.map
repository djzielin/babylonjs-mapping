{"version":3,"file":"TileBuilding.js","sourceRoot":"","sources":["../src/TileBuilding.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"@babylonjs/core/scene\";\nimport { Vector2, Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { Color3 } from \"@babylonjs/core/Maths/math\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport { BoundingBox } from \"@babylonjs/core/Culling/boundingBox\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer\";\nimport * as GeoJSON from './GeoJSON';\nimport Tile from \"./Tile\";\nimport TileSet from \"./TileSet\";\nimport TileMath, { ProjectionType } from \"./TileMath\";\nimport { Observable } from \"@babylonjs/core\";\nimport { TreeItemComponent } from \"@babylonjs/inspector/components/sceneExplorer/treeItemComponent\";\nimport { coordinateArrayOfArrays} from \"./GeoJSON\";\nimport { WebXRCompositionLayerRenderTargetTextureProvider } from \"@babylonjs/core/XR/features/Layers/WebXRCompositionLayer\";\nimport { MeshBuilder } from \"@babylonjs/core\";\n\nexport interface LineSegment {\n    p1: Vector2;\n    p2: Vector2;\n } \n\n export interface LineTestReturnPacket{\n    p: Vector3;\n    dir1: Vector3;\n    dir2: Vector3;\n }\n\nexport interface LineSegmentArray extends Array<LineSegment> { }\n\nexport default class TileBuilding {\n    public isBBoxContainedOnTile: boolean=false;\n    public ShapeType: String=\"\";\n\n    public LineArray: coordinateArrayOfArrays;\n    public LineSegments: LineSegmentArray=[];\n\n    public verticies: Vector3[]=[];\n\n    private tm: TileMath;\n\n    constructor(public mesh: Mesh, public tile: Tile) {\n        this.tm=this.tile.tileSet.ourTileMath;\n\n        this.getVerticies();\n        this.computeBuildingBoxInsideTile();     \n    }\n\n    public computeLineSegments(){\n        const ext=this.tile.tileSet.streetExtensionAmount;\n\n        for(let singleArray of this.LineArray){\n            for (let i = 0; i < singleArray.length-1; i++) {\n                let p1=this.tm.v3_to_v2(singleArray[i]);\n                let p2=this.tm.v3_to_v2(singleArray[i+1]);\n                \n                if(i==0){ //first coordinate\n                    const dir=p1.subtract(p2);\n                    const dirNormalized=dir.normalizeToNew();\n                    const extensionVec=dirNormalized.multiplyByFloats(ext,ext);\n                    p1=p1.add(extensionVec); //push p1 back just a bit\n                }\n                if(i==singleArray.length-2){ //last coordinate\n                    const dir=p2.subtract(p1);\n                    const dirNormalized=dir.normalizeToNew();\n                    const extensionVec=dirNormalized.multiplyByFloats(ext,ext);\n                    p2=p2.add(extensionVec); //push p2 forward just a bit\n                }\n                \n                const segment: LineSegment={\n                    p1: p1,\n                    p2: p2\n                };\n                this.LineSegments.push(segment);                \n            }\n        }\n    }\n\n    private computeDir(seg: LineSegment): Vector2{\n        const v1=seg.p1;\n        const v2=seg.p2\n\n        return v2.subtract(v1).normalize();\n    }\n\n    public findLineIntersectionPoint(otherStreet: TileBuilding): LineTestReturnPacket | false{\n        const tm=this.tile.tileSet.ourTileMath;\n\n        for(let l1_segment of this.LineSegments){\n            for(let l2_segment of otherStreet.LineSegments){\n                const result=tm.line_segment_intersect(l1_segment.p1, l1_segment.p2,l2_segment.p1,l2_segment.p2);\n\n                if(result){\n                    const result_v2=result as Vector2;                   \n\n                    return {\n                        p: this.tm.v2_to_v3(result_v2),\n                        dir1: this.tm.v2_to_v3(this.computeDir(l1_segment)),\n                        dir2: this.tm.v2_to_v3(this.computeDir(l2_segment))\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public dispose(){\n        this.mesh.dispose();\n        this.verticies=[];\n    }\n\n    //https://forum.babylonjs.com/t/is-there-any-way-to-get-the-vertices-of-a-given-mesh-facet-or-get-neighbouring-facets/19888/4\n    public getVerticies() {\n        const vd = this.mesh.getVerticesData(VertexBuffer.PositionKind);\n        if (vd === null) {\n            return;\n        }\n\n        const worldMatrix=this.mesh.getWorldMatrix();\n\n        for (var i = 0; i < vd.length; i += 3) {\n            const x = vd[i + 0];\n            const y = vd[i + 1];\n            const z = vd[+ 2];\n\n            const localVector=new Vector3(x, y, z);\n            const worldVector=Vector3.TransformCoordinates(localVector,worldMatrix);\n\n            this.verticies.push(worldVector);\n        }\n    }\n\n    public computeBuildingBoxInsideTile() {\n        console.log(\"trying to compute if: \" + this.mesh.name + \" is completely inside tile: \" + this.tile.mesh.name);\n        const mBounds=this.mesh.getBoundingInfo().boundingBox;\n\n        let bboxPointsInsideTile=0;\n\n        for(let v of mBounds.vectorsWorld){\n            const vNoY=new Vector3(v.x,0,v.z);\n\n            /*if(this.mesh.name.includes(\"Lewis\")){ //from when we were troubleshooting the bounds calc in Tile.ts\n                const sphere = MeshBuilder.CreateSphere(\"sphere\", { diameter: 0.25 },this.tile.tileSet.scene);\n                sphere.position=vNoY;\n            }*/\n\n            if(this.tile.box2D.intersectsPoint(vNoY)){\n                bboxPointsInsideTile++;\n            }\n        }\n        if(bboxPointsInsideTile==8){\n            this.isBBoxContainedOnTile=true;\n        } else{\n            this.isBBoxContainedOnTile=false;\n        }\n    }\n\n    public doVerticesMatch( otherBuilding: TileBuilding): boolean{\n        if(this.verticies.length!=otherBuilding.verticies.length){\n            return false;\n        }\n\n        let accumulatedError=0.0;\n\n        for(let i=0;i<this.verticies.length;i++){\n            const v1=this.verticies[i];\n            const v2=otherBuilding.verticies[i];\n\n            const diffVector=v1.subtract(v2);\n            const length=diffVector.length();\n            accumulatedError+=length;\n        }\n\n        console.log(\"accumulated error for: \" + this.mesh.name + \": \" + accumulatedError);\n\n        if(accumulatedError<0.00001){\n            return true;\n        }\n\n        return false;\n    }\n}\n\n"]}