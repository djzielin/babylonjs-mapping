{"version":3,"file":"Buildings.js","sourceRoot":"","sources":["../src/Buildings.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"@babylonjs/core/scene\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math\";\r\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\r\n\r\nimport * as GeoJSON from './GeoJSON';\r\nimport Tile from \"./Tile\";\r\nimport TileSet from \"./TileSet\";\r\nimport { ProjectionType } from \"./TileMath\";\r\nimport { Observable } from \"@babylonjs/core\";\r\nimport { TreeItemComponent } from \"@babylonjs/inspector/components/sceneExplorer/treeItemComponent\";\r\n\r\n//import \"@babylonjs/core/Materials/standardMaterial\"\r\n//import \"@babylonjs/inspector\";\r\n\r\nexport enum BuildingRequestType {\r\n    LoadTile,\r\n    CreateBuilding,\r\n    MergeAllBuildingsOnTile\r\n}\r\n\r\nexport interface BuildingRequest {\r\n    requestType: BuildingRequestType;\r\n    tile: Tile;\r\n    tileCoords: Vector3;\r\n    inProgress: boolean;\r\n    flipWinding: boolean;\r\n    feature?: GeoJSON.feature;\r\n    projectionType?: ProjectionType;\r\n    url?: string;    \r\n}\r\n\r\ninterface GeoFileLoaded {\r\n    url: string;\r\n    topLevel: GeoJSON.topLevel;\r\n}\r\n\r\nexport default abstract class Buildings {\r\n\r\n    //things the user might be interested in changing\r\n    public exaggeration = 1.0;\r\n    public doMerge = false;\r\n    public defaultBuildingHeight = 4.0;\r\n    public lineWidth=0.0001; //TODO: this needs to be different for EPSG:4326 vs EPSG:3857\r\n    public pointDiameter=0.5; //TODO: this is currently in game world units\r\n    public buildingsCreatedPerFrame = 10; //TODO: is there a better way to do this?\r\n    public cacheFiles = true;\r\n    public buildingMaterial: StandardMaterial;\r\n\r\n    protected buildingRequests: BuildingRequest[] = [];\r\n    protected filesLoaded: GeoFileLoaded[] = [];\r\n\r\n    private requestsProcessedSinceCaughtUp = 0;\r\n    protected ourGeoJSON: GeoJSON.GeoJSON;\r\n    private scene: Scene;\r\n    public onCaughtUpObservable: Observable<boolean> = new Observable;\r\n\r\n    constructor(public name: string, protected tileSet: TileSet) {\r\n        this.scene=this.tileSet.scene;\r\n\r\n        this.buildingMaterial = new StandardMaterial(\"buildingMaterial\", this.scene);\r\n        this.buildingMaterial.diffuseColor = new Color3(0.8, 0.8, 0.8);\r\n        this.buildingMaterial.freeze();\r\n        this.ourGeoJSON = new GeoJSON.GeoJSON(tileSet, this.scene);\r\n\r\n        const observer = this.scene.onBeforeRenderObservable.add(() => { //fire every frame\r\n            this.processBuildingRequests();\r\n        });\r\n    }\r\n\r\n    public abstract SubmitLoadTileRequest(tile: Tile): void;\r\n\r\n    public ProcessGeoJSON(request: BuildingRequest, topLevel: GeoJSON.topLevel): void\r\n    {\r\n        if (request.tile.tileCoords.equals(request.tileCoords) == false) {\r\n            console.warn(this.prettyName() + \"tile coords have changed while we were loading, not adding buildings to queue!\");\r\n            return;\r\n        }\r\n\r\n        let index = 0;\r\n        let addedBuildings = 0;\r\n        const meshArray: Mesh[] = [];\r\n        for (const f of topLevel.features) {\r\n            const brequest: BuildingRequest = {\r\n                requestType: BuildingRequestType.CreateBuilding,\r\n                tile: request.tile,\r\n                tileCoords: request.tile.tileCoords.clone(),\r\n                inProgress: false,\r\n                projectionType: request.projectionType,\r\n                feature: f,\r\n                flipWinding: request.flipWinding\r\n            }\r\n            this.buildingRequests.push(brequest);\r\n            addedBuildings++;\r\n        }\r\n\r\n        if (this.doMerge) {\r\n            //console.log(\"queueing up merge request for tile: \" + tile.tileCoords);\r\n            const mrequest: BuildingRequest = {\r\n                requestType: BuildingRequestType.MergeAllBuildingsOnTile, //request a merge\r\n                tile: request.tile,\r\n                tileCoords: request.tile.tileCoords.clone(),\r\n                inProgress: false,\r\n                flipWinding: request.flipWinding\r\n            }\r\n            this.buildingRequests.push(mrequest)\r\n        }\r\n        console.log(this.prettyName() + addedBuildings + \" building generation requests queued for tile: \" + request.tile.tileCoords);\r\n    }\r\n\r\n    protected prettyName(): string {\r\n        return \"[Buildings \" + this.name + \"] \";\r\n    }\r\n\r\n    private isURLLoaded(url: string): boolean {\r\n        const stripped = this.stripFilePrefix(url);\r\n        for (let f of this.filesLoaded) {\r\n            if (f.url == stripped) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getFeatures(url: string): GeoJSON.topLevel | null {\r\n        const stripped = this.stripFilePrefix(url);\r\n        for (let f of this.filesLoaded) {\r\n            if (f.url == stripped) {\r\n                return f.topLevel;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    protected stripFilePrefix(original: string): string {\r\n        return original;\r\n    }\r\n\r\n    protected removePendingRequest(index=0) {\r\n        //console.log(this.prettyName() + \"popping request off front of queue\");\r\n        this.requestsProcessedSinceCaughtUp++;\r\n\r\n        //this.buildingRequests.shift(); //pop ourselves off the queue\r\n        this.buildingRequests.splice(index,1);\r\n    }\r\n\r\n    protected handleLoadTileRequest(request: BuildingRequest): void {\r\n        if (!request.url) {\r\n            console.error(this.prettyName() + \"no valid URL specified in GeoJSON load request\");\r\n\r\n            this.removePendingRequest();\r\n            return;\r\n        }\r\n\r\n        if (this.isURLLoaded(request.url)) { //is the file already cached?\r\n            console.log(this.prettyName() + \"we already have this GeoJSON loaded: \" + this.stripFilePrefix(request.url));\r\n            const topLevel = this.getFeatures(request.url);\r\n            if (topLevel) {\r\n                this.ProcessGeoJSON(request, topLevel);\r\n            } else {\r\n                console.error(this.prettyName() + \"can't find topLevel in already loaded geojson file!\");\r\n            }\r\n\r\n            this.removePendingRequest();\r\n            return;\r\n        }\r\n\r\n        console.log(this.prettyName() + \"trying to fetch: \" + request.url);\r\n        request.inProgress = true;\r\n\r\n        fetch(request.url).then((res) => {\r\n            if (res.status == 200) {\r\n                res.text().then(\r\n                    (text) => {\r\n                        console.log(this.prettyName() + \"fetch completed for buildings for tile: \" + request.tileCoords);\r\n\r\n                        if (text.length > 0) {\r\n                            //console.log(this.prettyName() + \"about to json parse for tile: \" + request.tileCoords);\r\n\r\n                            const topLevel: GeoJSON.topLevel = JSON.parse(text);\r\n\r\n                            if (this.cacheFiles) {\r\n                                const floaded: GeoFileLoaded = {\r\n                                    url: this.stripFilePrefix(request.url!),\r\n                                    topLevel: topLevel\r\n                                };\r\n                                this.filesLoaded.push(floaded);\r\n                            }\r\n\r\n                            this.ProcessGeoJSON(request, topLevel);\r\n                        }\r\n\r\n                        this.removePendingRequest();\r\n                        return;\r\n                    }\r\n                );\r\n            } else if (res.status == 500) {\r\n                console.log(\"Error 500 requesting: \" + request.url);\r\n\r\n                //console.log(\"but we will try again!\");\r\n                //this.buildingRequests.push(request); //let's try again? maybe there should be a maximum number of retries?\r\n                \r\n                this.removePendingRequest();\r\n                return;\r\n            }\r\n            else {\r\n                console.error(this.prettyName() + \"unable to fetch: \" + request.url + \" error code: \" + res.status);\r\n                this.removePendingRequest();\r\n                return;\r\n            }\r\n        }\r\n        ).catch((error) => {\r\n            console.error(this.prettyName() + \"error during fetch! \" + error);\r\n\r\n            this.removePendingRequest();\r\n            return;\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public processBuildingRequests() {\r\n        if (this.buildingRequests.length == 0) {\r\n            if (this.requestsProcessedSinceCaughtUp > 0) {\r\n                console.log(this.prettyName() + \"caught up on all building generation requests! (processed \" + this.requestsProcessedSinceCaughtUp + \" requests)\");\r\n                this.requestsProcessedSinceCaughtUp = 0;\r\n                this.onCaughtUpObservable.notifyObservers(true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.buildingsCreatedPerFrame; i++) { //process certain number of requests per frame\r\n            //console.log(\"requests remaining in queue: \" + this.buildingRequests.length);\r\n            if (this.buildingRequests.length == 0) {\r\n                return;\r\n            }\r\n            let rIndex=0;\r\n            let request = this.buildingRequests[rIndex]; //peek at front of queue\r\n            \r\n            let foundWork=false;\r\n            if (request.inProgress == true) {\r\n\r\n                //TODO: this is where we could do some work while waiting (maybe process some buildings?)\r\n                for(let e=1;e<this.buildingRequests.length;e++){\r\n                    request=this.buildingRequests[e];\r\n                    if(request.requestType==BuildingRequestType.CreateBuilding || request.requestType==BuildingRequestType.MergeAllBuildingsOnTile){\r\n                        console.log(this.prettyName() + \"found some work to do while waiting!\");\r\n                        foundWork=true;\r\n                        rIndex=e;\r\n                        break;\r\n                    }\r\n                }\r\n                if(foundWork==false){\r\n                    return; //nothing to do\r\n                }\r\n            }    \r\n\r\n            if (request.tile.tileCoords.equals(request.tileCoords) == false) { //make sure tile still has same coords\r\n                console.warn(this.prettyName() + \"tile coords: \" + request.tileCoords + \" are no longer around, we must have already changed tile\");\r\n\r\n                this.removePendingRequest(rIndex);\r\n                return;\r\n            }\r\n\r\n            if (request.requestType == BuildingRequestType.LoadTile) {  \r\n\r\n                this.handleLoadTileRequest(request);\r\n                return;\r\n            }\r\n\r\n            if (request.requestType == BuildingRequestType.CreateBuilding) {\r\n                this.removePendingRequest(rIndex);\r\n\r\n                if (request.feature !== undefined) {\r\n                    if (request.projectionType !== undefined) { //create building request must have a projectionType\r\n                        //console.log(\"generating single building for tile: \" + request.tileCoords);\r\n\r\n                        //TODO: passing too many parameters into this!\r\n                        //maybe allow it to reference this class instead?\r\n                        this.ourGeoJSON.generateSingleBuilding(this.name, request.feature, request.projectionType, request.tile, this.buildingMaterial, this.exaggeration, this.defaultBuildingHeight, request.flipWinding, this.lineWidth,this.pointDiameter);\r\n                    } else {\r\n                        console.error(this.prettyName() + \"can't create a building with no projection specified!\");\r\n                    }\r\n                } else {\r\n                    console.error(this.prettyName() + \"can't create a building with no feature data!\");\r\n                }\r\n\r\n                //if (this.buildingRequests.length > 0) { //take a peek at next upcoming request\r\n                //    if (this.buildingRequests[0].requestType != BuildingRequestType.CreateBuilding) { //if its not another building, end processing this frame\r\n                //        return;\r\n                //    }\r\n                //}\r\n            }\r\n\r\n            if (request.requestType == BuildingRequestType.MergeAllBuildingsOnTile) {\r\n                this.removePendingRequest(rIndex);\r\n\r\n                console.log(this.prettyName() + \"processing merge request for tile: \" + request.tileCoords);\r\n                //console.log(\"  number of buildings in merge: \" + request.tile.buildings.length);\r\n\r\n                if (request.tile.buildings.length > 1) {\r\n                    for (let b of request.tile.buildings) {\r\n                        if (b.mesh.isReady() == false) {\r\n                            console.error(this.prettyName() + \"ERROR: Mesh not ready!\");\r\n                        }\r\n                    }\r\n                    //console.log(\"about to do big merge\");\r\n                    const allMeshes: Mesh[]=request.tile.getAllBuildingMeshes();\r\n                    const merged = Mesh.MergeMeshes(allMeshes,false); //false=don't get rid of originals\r\n\r\n                    if (merged) {\r\n                        merged.setParent(request.tile.mesh);\r\n                        merged.name = \"all_buildings_merged\";\r\n\r\n                        request.tile.hideIndividualBuildings();\r\n\r\n                        request.tile.mergedBuildingMesh=merged;\r\n                    } else {\r\n                        console.error(this.prettyName() + \"ERROR: unable to merge meshes!\");\r\n                    }\r\n                } else {\r\n                    console.log(this.prettyName() + \"not enough meshes to merge: \" + request.tile.buildings.length);\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public generateBuildings() {\r\n        console.log(this.prettyName() + \"user would like to generate buildings for all tiles in tileset\");\r\n\r\n        for (const t of this.tileSet.ourTiles) {\r\n            this.SubmitLoadTileRequest(t);\r\n            console.log(this.prettyName() + \"submitting geojson load request for tile: \" + t.tileCoords);\r\n        }\r\n    }\r\n}\r\n\r\n"]}