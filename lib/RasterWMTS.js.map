{"version":3,"file":"RasterWMTS.js","sourceRoot":"","sources":["../src/RasterWMTS.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2 } from \"@babylonjs/core/Maths/math\";\nimport Raster from \"./Raster\";\nimport TileSet from \"./TileSet\";\nimport { RetrievalLocation } from \"./TileSet\";\nimport { TileRequest } from \"./TileSet\";\n\nexport default class RasterWMTS extends Raster {\n    public tileMatrixSet: string = \"default028mm\";\n    public style = \"default\";\n    public extension = \".png\";\n    public baseURL = \"\";\n    public layerName = \"\";\n\n    constructor(ts: TileSet, retrievalLocation = RetrievalLocation.Remote_and_Save) {\n        super(\"WMTS\", ts, retrievalLocation);\n    }\n\n    public setup(url: string, layer: string) {\n        this.baseURL = url;\n        this.layerName = layer;\n    }\n\n    //https://developers.arcgis.com/rest/services-reference/enterprise/wmts-tile-map-service-.htm\n    //https://<wmts-url>/tile/<wmts-version>/<layer>/<style>/<tilematrixset>/<tilematrix>/<tilerow>/<tilecol>.<format>\n\n    public override getRasterURL(tileCoords: Vector2, zoom: number): string {\n        let baseURL: string = this.baseURL + \"/tile/1.0.0/\" + this.layerName + \"/\" + this.style + \"/\" + this.tileMatrixSet;\n        let url: string = baseURL + \"/\" + zoom + \"/\" + (tileCoords.y) + \"/\" + (tileCoords.x) + this.extension;\n\n        if (this.retrievalLocation == RetrievalLocation.Local) {\n            const baseUrl = window.location.href.replace(/\\/[^/]*\\.[^/]*$/, \"\").replace(/\\/$/, \"\") + \"/\"; //TODO make this a util function\n            url = baseUrl + \"map_cache/\" + zoom + \"_\" + (tileCoords.y) + \"_\" + (tileCoords.x) + this.extension;\n        }\n\n        return url;\n    }\n\n    //TODO, this should really be somewhere else so it works for all Raster subclasses, but we wanted to get the this.extension variable\n    public override async doTileSave(request: TileRequest) {\n        //now with retries per ChatGPT\n        const maxRetries=10;\n        const delay=1000;\n\n        let attempts = 0;\n        while (attempts < maxRetries) {\n            try {\n                const res = await fetch(request.url);\n    \n                if (res.status === 200) {\n                    const blob = await res.blob();\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement(\"a\");\n                    a.href = url;\n                    a.download = `${request.tileCoords.z}_${request.tileCoords.y}_${request.tileCoords.x}${this.extension}`;\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                    console.log(\"File downloaded successfully!\");\n                    return; // Exit the function after successful download\n                } else {\n                    console.warn(`Attempt ${attempts + 1}: HTTP status ${res.status}`);\n                }\n            } catch (error) {\n                console.error(`Attempt ${attempts + 1} failed:`, error);\n            }\n    \n            // Increment attempts and wait before retrying\n            attempts++;\n            if (attempts < maxRetries) {\n                console.log(`Retrying in ${delay}ms...`);\n                await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n        }\n    \n        console.error(`Failed to download file after ${maxRetries} attempts.`);\n\n\n        /*fetch(request.url).then((res) => {\n            if (res.status == 200) {\n                res.blob().then((blob) => {\n                    var a = document.createElement(\"a\");\n                    a.href = window.URL.createObjectURL(blob);\n                    a.download = request.tileCoords.z + \"_\" + request.tileCoords.y+\"_\" + request.tileCoords.x + this.extension;\n                    a.click();\n                });\n            }\n        });*/\n    }\n}"]}