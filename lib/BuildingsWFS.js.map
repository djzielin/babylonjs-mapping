{"version":3,"file":"BuildingsWFS.js","sourceRoot":"","sources":["../src/BuildingsWFS.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAIlD,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,SAAS;IAO/C,YAAY,IAAY,EAAS,GAAW,EAAS,SAAiB,EAAS,IAAe,EAAE,OAAgB;QAC5G,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QADQ,QAAG,GAAH,GAAG,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAW;QANvF,eAAU,GAAG,aAAa,CAAC;QAC3B,cAAS,GAAG,EAAE,CAAC;QACtB,uCAAuC;QAChC,eAAU,GAAG,qBAAqB,CAAC;QACnC,gBAAW,GAAG,KAAK,CAAC;QAKvB,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,SAAS,GAAG,uBAAuB,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,cAAc;QACjB,IAAI,CAAC,SAAS,GAAG,kCAAkC,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,qBAAqB,CAAC,IAAU;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE9E,MAAM,UAAU,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QACjD,MAAM,MAAM,GAAG,QAAQ;YACnB,UAAU,CAAC,CAAC,GAAG,GAAG;YAClB,UAAU,CAAC,CAAC,GAAG,GAAG;YAClB,UAAU,CAAC,CAAC,GAAG,GAAG;YAClB,UAAU,CAAC,CAAC,GAAG,GAAG;YAClB,2BAA2B,CAAC;QAEhC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QAEvG,MAAM,OAAO,GAAoB;YAC7B,WAAW,EAAE,mBAAmB,CAAC,QAAQ;YACzC,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YACnC,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,GAAG,EAAE,UAAU;YACf,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW;SAChC,CAAA;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;CACJ","sourcesContent":["import { EPSG_Type } from \"./TileMath\";\r\nimport { BuildingRequest } from \"./Buildings\";\r\nimport { BuildingRequestType } from \"./Buildings\";\r\n\r\nimport Tile from \"./Tile\";\r\nimport TileSet from \"./TileSet\";\r\nimport Buildings from \"./Buildings\";\r\n\r\nexport default class BuildingsWFS extends Buildings {\r\n    public urlService = \"service=WFS\";\r\n    public urlOutput = \"\";\r\n    //public urlVersion = \"&version=1.0.0\";\r\n    public urlRequest = \"&request=GetFeature\";\r\n    public flipWinding = false;\r\n\r\n    constructor(name: string, public url: string, public layerName: string, public epsg: EPSG_Type, tileSet: TileSet) {\r\n        super(name, tileSet);\r\n\r\n        this.setupGeoServer();\r\n    }\r\n\r\n    public setupAGOL() {\r\n        this.urlOutput = \"&outputFormat=GEOJSON\";\r\n        this.flipWinding = true;\r\n    }\r\n\r\n    public setupGeoServer() {\r\n        this.urlOutput = \"&outputFormat=application%2Fjson\";\r\n        this.flipWinding = false;\r\n    }\r\n\r\n    public SubmitLoadTileRequest(tile: Tile) {\r\n        const bboxValues = this.tileSet.ourTileMath.computeBBOX_4326(tile.tileCoords);\r\n\r\n        const urlFeature = \"&typeName=\" + this.layerName;\r\n        const urlBox = \"&bbox=\" +\r\n            bboxValues.x + \",\" +\r\n            bboxValues.y + \",\" +\r\n            bboxValues.z + \",\" +\r\n            bboxValues.w + \",\" +\r\n            \"urn:ogc:def:crs:EPSG:4326\";\r\n\r\n        const urlWithBox = this.url + this.urlService + this.urlRequest + urlFeature + this.urlOutput + urlBox;\r\n\r\n        const request: BuildingRequest = {\r\n            requestType: BuildingRequestType.LoadTile,\r\n            tile: tile,\r\n            tileCoords: tile.tileCoords.clone(),\r\n            epsgType: this.epsg,\r\n            url: urlWithBox,\r\n            inProgress: false,\r\n            flipWinding: this.flipWinding\r\n        }\r\n        this.buildingRequests.push(request);\r\n    }\r\n}\r\n"]}