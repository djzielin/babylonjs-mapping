{"version":3,"file":"BuildingsWFS.js","sourceRoot":"","sources":["../src/BuildingsWFS.ts"],"names":[],"mappings":"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","sourcesContent":["import { EPSG_Type } from \"./TileMath\";\nimport { BuildingRequest, RetrievalLocation, RetrievalType } from \"./Buildings\";\nimport { BuildingRequestType } from \"./Buildings\";\nimport { Vector4 } from \"@babylonjs/core\";\n\nimport Tile from \"./Tile\";\nimport TileSet from \"./TileSet\";\nimport Buildings from \"./Buildings\";\n\nexport default class BuildingsWFS extends Buildings {\n    public urlService = \"service=WFS\";\n    public urlOutput = \"\";\n    //public urlVersion = \"&version=1.0.0\";\n    public urlRequest = \"&request=GetFeature\";\n    public flipWinding = false;\n\n    constructor(name: string, public url: string, public layerName: string, public epsg: EPSG_Type, tileSet: TileSet, retrievalLocation=RetrievalLocation.Remote) {\n        super(name, tileSet, retrievalLocation);\n\n        this.setupGeoServer();\n    } \n\n    public setupAGOL() {\n        this.urlOutput = \"&outputFormat=GEOJSON\";\n        this.flipWinding = true;\n    }\n\n    public setupGeoServer() {\n        this.urlOutput = \"&outputFormat=application%2Fjson\";\n        this.flipWinding = false;\n    }\n\n    public SubmitLoadTileRequest(tile: Tile) {\n        const bboxValues = this.tileSet.ourTileMath.computeBBOX_4326(tile.tileCoords);\n\n        this.loadHelper(tile,bboxValues);\n    }\n\n    public SubmitLoadAllRequest() {\n        const tile=this.tileSet.ourTiles[0]; //lets just choose the first tile so it has something\n        const bboxValues = this.tileSet.ourTileMath.computeBBOX_4326_Tileset();\n\n        this.loadHelper(tile,bboxValues);       \n    }\n\n    private loadHelper(tile: Tile, bboxValues: Vector4){\n\n        const urlFeature = \"&typeName=\" + this.layerName;\n        const urlBox = \"&bbox=\" +\n            bboxValues.x + \",\" +\n            bboxValues.y + \",\" +\n            bboxValues.z + \",\" +\n            bboxValues.w + \",\" +\n            \"urn:ogc:def:crs:EPSG:4326\";\n\n        let requestURL = this.url + this.urlService + this.urlRequest + urlFeature + this.urlOutput + urlBox;\n\n        if(this.retrevialLocation==RetrievalLocation.Local && this.retrievalType==RetrievalType.AllData){\n            const baseUrl = window.location.href.replace(/\\/[^/]*\\.[^/]*$/, \"\").replace(/\\/$/, \"\") + \"/\"; //TODO make this a util function\n            requestURL = baseUrl + \"map_cache/\"+this.name + \".json\"; //override requestURL for local file\n        }\n\n        const request: BuildingRequest = {\n            requestType: BuildingRequestType.LoadTile,\n            tile: tile, \n            tileCoords: tile.tileCoords.clone(),\n            epsgType: this.epsg,\n            url: requestURL,\n            inProgress: false,\n            flipWinding: this.flipWinding\n        }\n        this.buildingRequests.push(request);\n    }\n}\n"]}